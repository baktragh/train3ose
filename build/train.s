;
; File generated by cc65 v 2.18 - Git 08705a3
;
	.fopt		compiler,"cc65 v 2.18 - Git 08705a3"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_memcmp
	.import		_memcpy
	.import		_memmove
	.import		_memset
	.import		_get_tv
	.export		_T_TRAIN_TITLE
	.export		_T_MENU_ITEM_1
	.export		_T_MENU_ITEM_SPD_1
	.export		_T_MENU_ITEM_SPD_2
	.export		_T_MENU_ITEM_AUDIO_1
	.export		_T_MENU_ITEM_AUDIO_2
	.export		_T_SCENE_SEL
	.export		_T_SCENE_ROW1
	.export		_T_SCENE_ROW2
	.export		_T_SCENE_ROW3
	.export		_T_SCENE_ROW4
	.export		_T_SCENE_ROW5
	.export		_T_SCENE_ROW6
	.export		_T_SCENE_ROW7
	.export		_T_SCENE_ROW8
	.export		_T_SCENE_ROW9
	.export		_T_SCENE_ROW10
	.export		_T_SCENE_BEGIN
	.export		_T_SCORE_BAR
	.export		_T_TOPSCORE_BAR
	.export		_T_LEVEL_COMPLETE
	.export		_T_TRAIN_CRASHED0
	.export		_T_TRAIN_CRASHED1
	.export		_T_TRAIN_CRASHED2
	.export		_T_TRAIN_CRASHED3
	.export		_T_TRAIN_POISONED
	.export		_T_GAME_OVER
	.export		_T_PRESS_FIRE
	.export		_T_CONGRAT_1
	.export		_T_CONGRAT_2
	.export		_T_CONGRAT_3
	.export		_T_CONGRAT_4
	.export		_T_NEW_HISCORE
	.export		_T_WELL_DONE
	.import		_TRAIN_DATA_CHARSET1
	.import		_TRAIN_DATA_CHARSET1_PAGE
	.import		_TRAIN_DATA_CHARSET2_PAGE
	.import		_TRAIN_DATA_DL_MENU
	.import		_TRAIN_DATA_DL_GAME
	.import		_TRAIN_DATA_DL_INTERMISSION
	.import		_TRAIN_DATA_DL_SCENESELECTION
	.import		_TRAIN_DATA_PMGAREA
	.import		_TRAIN_DATA_GAMESCREEN
	.import		_TRAIN_DATA_STATUSBARSCREEN
	.import		_TRAIN_FIGURE_RIGHT
	.import		_TRAIN_FIGURE_LEFT
	.import		_TRAIN_FIGURE_UP
	.import		_TRAIN_FIGURE_DOWN
	.import		_MENU_TRAIN_TITLE
	.import		_TRAIN_GAME_LEVELS
	.import		_TRAIN_GAME_ELEMENTS
	.export		_menuScrollTextFlag
	.export		_handleMenu
	.export		_clearScreen
	.export		_clearStatusBar
	.export		_paintTrainTitle
	.export		_paintMenuItems
	.export		_screenSceneSelection
	.export		_clearPlayField
	.export		_hideLoco
	.export		_setGameSpeed
	.export		_toggleGameInit
	.export		_expandAndPaintLevel
	.export		_transposeElement
	.export		_eraseElement
	.export		_expandMask
	.export		_paintGameStatusBar
	.export		_decimalDisplaysInit
	.export		_resetZonedScore
	.import		_incrementScore
	.import		_decrementScore
	.export		_updateMenuScores
	.export		_incrementNextLifeScore
	.export		_pmgInit
	.export		_setLocoPos
	.export		_locoMove
	.export		_repaintLoco
	.export		_pmgSetForLoco
	.export		_pmgSetForSceneSelection
	.export		_pmgSetDefaultLocoColors
	.export		_delay
	.export		_setScreen
	.export		_enableDisplay
	.export		_disableDisplay
	.export		_fadeInAndOut
	.export		_levelFadeOut
	.export		_levelFadeIn
	.export		_verticalSync
	.import		_rmtSetUniversalVBI
	.export		_audioRequestSongLine
	.export		_audioRequestSFX
	.export		_audioSetInGameFlag
	.export		_audioSetForSilence
	.export		_audioStopInGameAudio
	.export		_updateTrainArray
	.export		_drawTrainCars
	.export		_gameToNextLevel
	.export		_gameLoseLife
	.export		_screenGameOver
	.export		_screenGratulation
	.export		_screenNewHighScore
	.import		_dliHandler
	.import		_dliMenuHandler
	.import		_dliInterMission
	.import		_statusBarForeground
	.import		_statusBarBackground
	.export		_swapAllControls
	.import		_filteredJS
	.import		_getFilteredJS
	.export		_locoX
	.export		_locoY
	.export		_locoPtr
	.export		_p0x
	.export		_p0y
	.export		_p0Area
	.export		_p1Area
	.export		_p2Area
	.export		_p3Area
	.export		_locoJoystickDirection
	.export		_locoOldJoystickDirection
	.export		_locoDirectionCode
	.export		_locoProbePtr
	.export		_probedElement
	.export		_trainCarArray
	.export		_trainDirectionArray
	.importzp	_zp_ptr1
	.importzp	_zp_ptr2
	.importzp	_zp_ptr3
	.importzp	_zp_z1
	.importzp	_zp_x1
	.export		_doorPtr
	.export		_inverseMasks
	.export		_directionReverseUpdate
	.export		_dScore
	.export		_dLastScore
	.export		_dHighScore
	.export		_dNextLifeScore
	.export		_dLevelInitialScore
	.export		_d300
	.export		_d5000
	.export		_normalMoveDelay
	.export		_fastMoveDelay
	.export		_realMoveDelay
	.export		_lastKey
	.export		_PALSpeeds
	.export		_NTSCSpeeds
	.export		_PAL2NTSC
	.export		_trainData
	.export		_gameInitLives
	.export		_dGameInitScore
	.export		_dGameInitNextLifeScore
	.export		_gameInitType
	.export		_gameLevelIndex
	.export		_gameMaxLevelIndex
	.export		_gameLives
	.export		_lastLevelExpanded
	.export		_levelTreasure
	.export		_levelTrainLength
	.export		_levelInitialLocoFigure
	.export		_levelFlags
	.export		_gameScorePtr
	.export		_gameLevelPtr
	.export		_gameLivesPtr
	.export		_lastScorePtr
	.export		_highScorePtr
	.export		_menuCurrentItem
	.export		_menuGameSpeed
	.export		_menuGameAudio
	.export		_menuCycleTrainFlag
	.import		_songLineRequested
	.import		_sfxRequested
	.import		_inGameAudioFlag
	.export		_main
	.export		_saveZonedScore
	.export		_setIntermissionScreen
	.export		_setSceneSelectionScreen
	.export		_sceneSelectionMoveHighlight
	.export		_screenRainbow

.segment	"DATA"

_T_TRAIN_TITLE:
	.byte	$2F
	.byte	$70
	.byte	$65
	.byte	$6E
	.byte	$00
	.byte	$33
	.byte	$6F
	.byte	$75
	.byte	$72
	.byte	$63
	.byte	$65
	.byte	$00
	.byte	$25
	.byte	$64
	.byte	$69
	.byte	$74
	.byte	$69
	.byte	$6F
	.byte	$6E
_T_MENU_ITEM_1:
	.byte	$33
	.byte	$34
	.byte	$21
	.byte	$32
	.byte	$34
	.byte	$00
	.byte	$27
	.byte	$21
	.byte	$2D
	.byte	$25
_T_MENU_ITEM_SPD_1:
	.byte	$27
	.byte	$61
	.byte	$6D
	.byte	$65
	.byte	$00
	.byte	$33
	.byte	$70
	.byte	$65
	.byte	$65
	.byte	$64
	.byte	$1A
	.byte	$00
	.byte	$2E
	.byte	$2F
	.byte	$32
	.byte	$2D
	.byte	$21
	.byte	$2C
_T_MENU_ITEM_SPD_2:
	.byte	$27
	.byte	$61
	.byte	$6D
	.byte	$65
	.byte	$00
	.byte	$33
	.byte	$70
	.byte	$65
	.byte	$65
	.byte	$64
	.byte	$1A
	.byte	$00
	.byte	$33
	.byte	$2C
	.byte	$2F
	.byte	$37
	.byte	$25
	.byte	$32
_T_MENU_ITEM_AUDIO_1:
	.byte	$29
	.byte	$6E
	.byte	$0D
	.byte	$27
	.byte	$61
	.byte	$6D
	.byte	$65
	.byte	$00
	.byte	$21
	.byte	$75
	.byte	$64
	.byte	$69
	.byte	$6F
	.byte	$1A
	.byte	$00
	.byte	$33
	.byte	$6F
	.byte	$75
	.byte	$6E
	.byte	$64
	.byte	$00
	.byte	$26
	.byte	$38
_T_MENU_ITEM_AUDIO_2:
	.byte	$29
	.byte	$6E
	.byte	$0D
	.byte	$27
	.byte	$61
	.byte	$6D
	.byte	$65
	.byte	$00
	.byte	$21
	.byte	$75
	.byte	$64
	.byte	$69
	.byte	$6F
	.byte	$1A
	.byte	$00
	.byte	$22
	.byte	$27
	.byte	$00
	.byte	$2D
	.byte	$75
	.byte	$73
	.byte	$69
	.byte	$63
_T_SCENE_SEL:
	.byte	$33
	.byte	$23
	.byte	$25
	.byte	$2E
	.byte	$25
	.byte	$00
	.byte	$00
	.byte	$33
	.byte	$25
	.byte	$2C
	.byte	$25
	.byte	$23
	.byte	$34
	.byte	$29
	.byte	$2F
	.byte	$2E
_T_SCENE_ROW1:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$10
	.byte	$12
	.byte	$00
	.byte	$10
	.byte	$13
	.byte	$00
	.byte	$10
	.byte	$14
	.byte	$00
	.byte	$10
	.byte	$15
_T_SCENE_ROW2:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$16
	.byte	$00
	.byte	$10
	.byte	$17
	.byte	$00
	.byte	$10
	.byte	$18
	.byte	$00
	.byte	$10
	.byte	$19
	.byte	$00
	.byte	$11
	.byte	$10
_T_SCENE_ROW3:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$11
	.byte	$00
	.byte	$11
	.byte	$12
	.byte	$00
	.byte	$11
	.byte	$13
	.byte	$00
	.byte	$11
	.byte	$14
	.byte	$00
	.byte	$11
	.byte	$15
_T_SCENE_ROW4:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$16
	.byte	$00
	.byte	$11
	.byte	$17
	.byte	$00
	.byte	$11
	.byte	$18
	.byte	$00
	.byte	$11
	.byte	$19
	.byte	$00
	.byte	$12
	.byte	$10
_T_SCENE_ROW5:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$11
	.byte	$00
	.byte	$12
	.byte	$12
	.byte	$00
	.byte	$12
	.byte	$13
	.byte	$00
	.byte	$12
	.byte	$14
	.byte	$00
	.byte	$12
	.byte	$15
_T_SCENE_ROW6:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$16
	.byte	$00
	.byte	$12
	.byte	$17
	.byte	$00
	.byte	$12
	.byte	$18
	.byte	$00
	.byte	$12
	.byte	$19
	.byte	$00
	.byte	$13
	.byte	$10
_T_SCENE_ROW7:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$13
	.byte	$11
	.byte	$00
	.byte	$13
	.byte	$12
	.byte	$00
	.byte	$13
	.byte	$13
	.byte	$00
	.byte	$13
	.byte	$14
	.byte	$00
	.byte	$13
	.byte	$15
_T_SCENE_ROW8:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$13
	.byte	$16
	.byte	$00
	.byte	$13
	.byte	$17
	.byte	$00
	.byte	$13
	.byte	$18
	.byte	$00
	.byte	$13
	.byte	$19
	.byte	$00
	.byte	$14
	.byte	$10
_T_SCENE_ROW9:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$14
	.byte	$11
	.byte	$00
	.byte	$14
	.byte	$12
	.byte	$00
	.byte	$14
	.byte	$13
	.byte	$00
	.byte	$14
	.byte	$14
	.byte	$00
	.byte	$14
	.byte	$15
_T_SCENE_ROW10:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$14
	.byte	$16
	.byte	$00
	.byte	$14
	.byte	$17
	.byte	$00
	.byte	$14
	.byte	$18
	.byte	$00
	.byte	$14
	.byte	$19
	.byte	$00
	.byte	$15
	.byte	$10
_T_SCENE_BEGIN:
	.byte	$33
	.byte	$65
	.byte	$6C
	.byte	$65
	.byte	$63
	.byte	$74
	.byte	$00
	.byte	$73
	.byte	$63
	.byte	$65
	.byte	$6E
	.byte	$65
	.byte	$00
	.byte	$61
	.byte	$6E
	.byte	$64
	.byte	$00
	.byte	$70
	.byte	$72
	.byte	$65
	.byte	$73
	.byte	$73
	.byte	$00
	.byte	$A6
	.byte	$A9
	.byte	$B2
	.byte	$A5
	.byte	$00
	.byte	$74
	.byte	$6F
	.byte	$00
	.byte	$62
	.byte	$65
	.byte	$67
	.byte	$69
	.byte	$6E
_T_SCORE_BAR:
	.byte	$33
	.byte	$23
	.byte	$2F
	.byte	$32
	.byte	$25
	.byte	$1A
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$33
	.byte	$23
	.byte	$25
	.byte	$2E
	.byte	$25
	.byte	$1A
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$2C
	.byte	$29
	.byte	$36
	.byte	$25
	.byte	$33
	.byte	$1A
	.byte	$13
_T_TOPSCORE_BAR:
	.byte	$2C
	.byte	$21
	.byte	$33
	.byte	$34
	.byte	$00
	.byte	$33
	.byte	$23
	.byte	$2F
	.byte	$32
	.byte	$25
	.byte	$1A
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$28
	.byte	$29
	.byte	$27
	.byte	$28
	.byte	$00
	.byte	$33
	.byte	$23
	.byte	$2F
	.byte	$32
	.byte	$25
	.byte	$1A
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
_T_LEVEL_COMPLETE:
	.byte	$33
	.byte	$63
	.byte	$65
	.byte	$6E
	.byte	$65
	.byte	$00
	.byte	$63
	.byte	$6F
	.byte	$6D
	.byte	$70
	.byte	$6C
	.byte	$65
	.byte	$74
	.byte	$65
	.byte	$00
	.byte	$01
_T_TRAIN_CRASHED0:
	.byte	$34
	.byte	$32
	.byte	$21
	.byte	$29
	.byte	$2E
	.byte	$00
	.byte	$23
	.byte	$32
	.byte	$21
	.byte	$33
	.byte	$28
	.byte	$25
	.byte	$24
_T_TRAIN_CRASHED1:
	.byte	$23
	.byte	$32
	.byte	$21
	.byte	$33
	.byte	$28
	.byte	$01
	.byte	$00
	.byte	$22
	.byte	$2F
	.byte	$2F
	.byte	$2D
	.byte	$01
	.byte	$00
	.byte	$22
	.byte	$21
	.byte	$2E
	.byte	$27
	.byte	$01
_T_TRAIN_CRASHED2:
	.byte	$26
	.byte	$21
	.byte	$34
	.byte	$21
	.byte	$2C
	.byte	$00
	.byte	$22
	.byte	$2F
	.byte	$29
	.byte	$2C
	.byte	$25
	.byte	$32
	.byte	$00
	.byte	$25
	.byte	$38
	.byte	$30
	.byte	$2C
	.byte	$2F
	.byte	$33
	.byte	$29
	.byte	$2F
	.byte	$2E
_T_TRAIN_CRASHED3:
	.byte	$34
	.byte	$32
	.byte	$21
	.byte	$29
	.byte	$2E
	.byte	$00
	.byte	$24
	.byte	$25
	.byte	$32
	.byte	$21
	.byte	$29
	.byte	$2C
	.byte	$25
	.byte	$24
_T_TRAIN_POISONED:
	.byte	$80
	.byte	$B0
	.byte	$AF
	.byte	$A9
	.byte	$B3
	.byte	$AF
	.byte	$AE
	.byte	$A5
	.byte	$A4
	.byte	$80
	.byte	$A3
	.byte	$A1
	.byte	$B2
	.byte	$A7
	.byte	$AF
	.byte	$80
_T_GAME_OVER:
	.byte	$27
	.byte	$21
	.byte	$2D
	.byte	$25
	.byte	$00
	.byte	$00
	.byte	$2F
	.byte	$36
	.byte	$25
	.byte	$32
_T_PRESS_FIRE:
	.byte	$30
	.byte	$72
	.byte	$65
	.byte	$73
	.byte	$73
	.byte	$00
	.byte	$A6
	.byte	$A9
	.byte	$B2
	.byte	$A5
	.byte	$00
	.byte	$74
	.byte	$6F
	.byte	$00
	.byte	$63
	.byte	$6F
	.byte	$6E
	.byte	$74
	.byte	$69
	.byte	$6E
	.byte	$75
	.byte	$65
_T_CONGRAT_1:
	.byte	$23
	.byte	$2F
	.byte	$2E
	.byte	$27
	.byte	$32
	.byte	$21
	.byte	$34
	.byte	$35
	.byte	$2C
	.byte	$21
	.byte	$34
	.byte	$29
	.byte	$2F
	.byte	$2E
	.byte	$33
	.byte	$00
	.byte	$01
_T_CONGRAT_2:
	.byte	$39
	.byte	$2F
	.byte	$35
	.byte	$00
	.byte	$28
	.byte	$21
	.byte	$36
	.byte	$25
	.byte	$00
	.byte	$22
	.byte	$25
	.byte	$25
	.byte	$2E
_T_CONGRAT_3:
	.byte	$30
	.byte	$32
	.byte	$2F
	.byte	$2D
	.byte	$2F
	.byte	$34
	.byte	$25
	.byte	$24
	.byte	$00
	.byte	$34
	.byte	$2F
_T_CONGRAT_4:
	.byte	$73
	.byte	$74
	.byte	$61
	.byte	$74
	.byte	$69
	.byte	$6F
	.byte	$6E
	.byte	$00
	.byte	$63
	.byte	$68
	.byte	$61
	.byte	$6D
	.byte	$70
	.byte	$69
	.byte	$6F
	.byte	$6E
_T_NEW_HISCORE:
	.byte	$2E
	.byte	$25
	.byte	$37
	.byte	$00
	.byte	$28
	.byte	$29
	.byte	$27
	.byte	$28
	.byte	$00
	.byte	$33
	.byte	$23
	.byte	$2F
	.byte	$32
	.byte	$25
_T_WELL_DONE:
	.byte	$37
	.byte	$25
	.byte	$2C
	.byte	$2C
	.byte	$00
	.byte	$00
	.byte	$24
	.byte	$2F
	.byte	$2E
	.byte	$25
_directionReverseUpdate:
	.word	$0002
	.word	$FFFE
	.word	$0050
	.word	$FFB0
_d300:
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$13
	.byte	$10
_d5000:
	.byte	$10
	.byte	$10
	.byte	$15
	.byte	$10
	.byte	$10
_PALSpeeds:
	.byte	$11
	.byte	$14
_NTSCSpeeds:
	.byte	$14
	.byte	$18
_PAL2NTSC:
	.byte	$00
	.byte	$20
	.byte	$30
	.byte	$40
	.byte	$50
	.byte	$60
	.byte	$70
	.byte	$80
	.byte	$90
	.byte	$A0
	.byte	$B0
	.byte	$C0
	.byte	$F0
	.byte	$E0
	.byte	$10
	.byte	$20
_trainData:
	.addr	_TRAIN_FIGURE_RIGHT

.segment	"BSS"

_menuScrollTextFlag:
	.res	1,$00
_locoX:
	.res	1,$00
_locoY:
	.res	1,$00
_locoPtr:
	.res	2,$00
_p0x:
	.res	1,$00
_p0y:
	.res	1,$00
_p0Area:
	.res	2,$00
_p1Area:
	.res	2,$00
_p2Area:
	.res	2,$00
_p3Area:
	.res	2,$00
_locoJoystickDirection:
	.res	1,$00
_locoOldJoystickDirection:
	.res	1,$00
_locoDirectionCode:
	.res	1,$00
_locoProbePtr:
	.res	2,$00
_probedElement:
	.res	1,$00
_trainCarArray:
	.res	180,$00
_trainDirectionArray:
	.res	180,$00
_doorPtr:
	.res	2,$00
_inverseMasks:
	.res	128,$00
_dScore:
	.res	5,$00
_dLastScore:
	.res	5,$00
_dHighScore:
	.res	5,$00
_dNextLifeScore:
	.res	5,$00
_dLevelInitialScore:
	.res	5,$00
_normalMoveDelay:
	.res	1,$00
_fastMoveDelay:
	.res	1,$00
_realMoveDelay:
	.res	1,$00
_lastKey:
	.res	1,$00
_gameInitLives:
	.res	1,$00
_dGameInitScore:
	.res	5,$00
_dGameInitNextLifeScore:
	.res	5,$00
_gameInitType:
	.res	1,$00
_gameLevelIndex:
	.res	1,$00
_gameMaxLevelIndex:
	.res	1,$00
_gameLives:
	.res	1,$00
_lastLevelExpanded:
	.res	1,$00
_levelTreasure:
	.res	1,$00
_levelTrainLength:
	.res	1,$00
_levelInitialLocoFigure:
	.res	2,$00
_levelFlags:
	.res	1,$00
_gameScorePtr:
	.res	2,$00
_gameLevelPtr:
	.res	2,$00
_gameLivesPtr:
	.res	2,$00
_lastScorePtr:
	.res	2,$00
_highScorePtr:
	.res	2,$00
_menuCurrentItem:
	.res	1,$00
_menuGameSpeed:
	.res	1,$00
_menuGameAudio:
	.res	1,$00
_menuCycleTrainFlag:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ handleMenu (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_handleMenu: near

.segment	"CODE"

	lda     #<(_TRAIN_DATA_DL_MENU)
	ldx     #>(_TRAIN_DATA_DL_MENU)
	jsr     pushax
	lda     #$0C
	jsr     pusha
	lda     #$30
	jsr     pusha
	lda     #<(_dliMenuHandler)
	ldx     #>(_dliMenuHandler)
	jsr     pushax
	lda     _TRAIN_DATA_CHARSET2_PAGE
	jsr     pusha
	lda     #$24
	jsr     pusha
	lda     #$0C
	jsr     pusha
	lda     #$32
	jsr     pusha
	lda     #$0E
	jsr     pusha
	lda     #$00
	jsr     pusha
	jsr     _setScreen
	jsr     _clearScreen
	jsr     _clearStatusBar
	jsr     _pmgSetForLoco
	jsr     _pmgSetDefaultLocoColors
	lda     #$00
	sta     _menuCurrentItem
	jsr     _paintTrainTitle
	jsr     _paintMenuItems
	lda     #$01
	sta     _menuCycleTrainFlag
	lda     #$02
	sta     _menuScrollTextFlag
	lda     #$21
	jsr     pusha
	jsr     _audioRequestSongLine
	lda     #$02
	jsr     pusha
	jsr     _verticalSync
	lda     #<(_TRAIN_DATA_STATUSBARSCREEN)
	ldx     #>(_TRAIN_DATA_STATUSBARSCREEN)
	jsr     pushax
	lda     #<(_T_TOPSCORE_BAR)
	ldx     #>(_T_TOPSCORE_BAR)
	jsr     pushax
	ldx     #$00
	lda     #$28
	jsr     _memcpy
	lda     _lastScorePtr
	ldx     _lastScorePtr+1
	jsr     pushax
	lda     #<(_dLastScore)
	ldx     #>(_dLastScore)
	jsr     pushax
	ldx     #$00
	lda     #$05
	jsr     _memcpy
	lda     _highScorePtr
	ldx     _highScorePtr+1
	jsr     pushax
	lda     #<(_dHighScore)
	ldx     #>(_dHighScore)
	jsr     pushax
	ldx     #$00
	lda     #$05
	jsr     _memcpy
	lda     #$00
	sta     _locoX
	lda     #$09
	sta     _locoY
	lda     #>(_TRAIN_FIGURE_RIGHT)
	sta     _trainData+1
	lda     #<(_TRAIN_FIGURE_RIGHT)
	sta     _trainData
	lda     _locoX
	jsr     pusha
	lda     _locoY
	jsr     pusha
	lda     #$04
	jsr     pusha
	lda     #$06
	jsr     pusha
	jsr     _setLocoPos
	jsr     _enableDisplay
	jsr     _swapAllControls
	lda     #$00
	sta     $0014
L07E1:	lda     $D01F
	cmp     #$06
	jeq     L07E2
	lda     $0284
	bne     L0E83
	sta     $004D
	lda     _menuCurrentItem
	beq     L07E2
L0E81:	lda     $0284
	beq     L0E81
	lda     _menuCurrentItem
	cmp     #$01
	bne     L0E82
	lda     _menuGameSpeed
	jsr     bnega
	sta     _menuGameSpeed
	jmp     L0801
L0E82:	lda     _menuCurrentItem
	cmp     #$02
	bne     L0801
	lda     _menuGameAudio
	jsr     bnega
	sta     _menuGameAudio
L0801:	jsr     _paintMenuItems
	lda     #$0A
	jsr     pusha
	jsr     _delay
L0E83:	lda     $0278
	cmp     #$0E
	bne     L0E86
	lda     _menuCurrentItem
	beq     L0E86
	dec     _menuCurrentItem
	jsr     _paintMenuItems
	lda     #$00
	sta     $004D
	lda     #$0A
	jsr     pusha
	jsr     _delay
L0E86:	lda     $0278
	cmp     #$0D
	bne     L07E1
	lda     _menuCurrentItem
	cmp     #$02
	bcs     L07E1
	inc     _menuCurrentItem
	jsr     _paintMenuItems
	lda     #$00
	sta     $004D
	lda     #$0A
	jsr     pusha
	jsr     _delay
	jmp     L07E1
L07E2:	jsr     _disableDisplay
	lda     #$00
	sta     _menuCycleTrainFlag
	sta     _menuScrollTextFlag
	lda     #$49
	jsr     pusha
	jmp     _audioRequestSongLine

.endproc

; ---------------------------------------------------------------
; void __near__ clearScreen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clearScreen: near

.segment	"CODE"

	lda     #<(_TRAIN_DATA_GAMESCREEN)
	ldx     #>(_TRAIN_DATA_GAMESCREEN)
	jsr     pushax
	ldx     #$03
	lda     #$C0
	jmp     __bzero

.endproc

; ---------------------------------------------------------------
; void __near__ clearStatusBar (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clearStatusBar: near

.segment	"CODE"

	lda     #>(_TRAIN_DATA_STATUSBARSCREEN)
	sta     ptr1+1
	lda     #<(_TRAIN_DATA_STATUSBARSCREEN)
	sta     ptr1
	lda     #$00
	ldy     #$27
L0E89:	sta     (ptr1),y
	dey
	bpl     L0E89
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ paintTrainTitle (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_paintTrainTitle: near

.segment	"BSS"

L0840:
	.res	2,$00
L0841:
	.res	2,$00
L0842:
	.res	1,$00

.segment	"CODE"

	lda     #>(_TRAIN_DATA_GAMESCREEN+40)
	sta     L0840+1
	lda     #<(_TRAIN_DATA_GAMESCREEN+40)
	sta     L0840
	lda     #>(_MENU_TRAIN_TITLE)
	sta     L0841+1
	lda     #<(_MENU_TRAIN_TITLE)
	sta     L0841
	lda     #$00
	sta     L0842
L0E8A:	lda     L0842
	cmp     #$09
	bcs     L0849
	lda     L0840
	ldx     L0840+1
	jsr     pushax
	lda     L0841
	ldx     L0841+1
	jsr     pushax
	ldx     #$00
	lda     #$27
	jsr     _memcpy
	lda     #$28
	clc
	adc     L0840
	sta     L0840
	bcc     L0856
	inc     L0840+1
L0856:	lda     #$27
	clc
	adc     L0841
	sta     L0841
	bcc     L0859
	inc     L0841+1
L0859:	inc     L0842
	jmp     L0E8A
L0849:	lda     #<(_TRAIN_DATA_GAMESCREEN+410)
	ldx     #>(_TRAIN_DATA_GAMESCREEN+410)
	jsr     pushax
	lda     #<(_T_TRAIN_TITLE)
	ldx     #>(_T_TRAIN_TITLE)
	jsr     pushax
	ldx     #$00
	lda     #$13
	jsr     _memcpy
	lda     #<(_TRAIN_DATA_GAMESCREEN)
	ldx     #>(_TRAIN_DATA_GAMESCREEN)
	jsr     pushax
	lda     #$59
	jsr     pusha0
	lda     #$28
	jsr     _memset
	lda     #<(_TRAIN_DATA_GAMESCREEN+440)
	ldx     #>(_TRAIN_DATA_GAMESCREEN+440)
	jsr     pushax
	lda     #$59
	jsr     pusha0
	lda     #$28
	jsr     _memset
	lda     #<(_TRAIN_DATA_GAMESCREEN+600)
	ldx     #>(_TRAIN_DATA_GAMESCREEN+600)
	jsr     pushax
	lda     #$5E
	jsr     pusha0
	lda     #$28
	jmp     _memset

.endproc

; ---------------------------------------------------------------
; void __near__ paintMenuItems (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_paintMenuItems: near

.segment	"BSS"

L0874:
	.res	1,$00
L0875:
	.res	1,$00
L0876:
	.res	2,$00

.segment	"CODE"

	lda     #$01
	jsr     pusha
	jsr     _verticalSync
	lda     #>(_TRAIN_DATA_GAMESCREEN+480)
	sta     ptr1+1
	lda     #<(_TRAIN_DATA_GAMESCREEN+480)
	sta     ptr1
	lda     #$00
	ldy     #$77
L0E8B:	sta     (ptr1),y
	dey
	bpl     L0E8B
	lda     #<(_TRAIN_DATA_GAMESCREEN+495)
	ldx     #>(_TRAIN_DATA_GAMESCREEN+495)
	jsr     pushax
	lda     #<(_T_MENU_ITEM_1)
	ldx     #>(_T_MENU_ITEM_1)
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     _memcpy
	lda     _menuGameSpeed
	bne     L0885
	lda     #<(_TRAIN_DATA_GAMESCREEN+531)
	ldx     #>(_TRAIN_DATA_GAMESCREEN+531)
	jsr     pushax
	lda     #<(_T_MENU_ITEM_SPD_1)
	ldx     #>(_T_MENU_ITEM_SPD_1)
	jmp     L0E95
L0885:	lda     #<(_TRAIN_DATA_GAMESCREEN+531)
	ldx     #>(_TRAIN_DATA_GAMESCREEN+531)
	jsr     pushax
	lda     #<(_T_MENU_ITEM_SPD_2)
	ldx     #>(_T_MENU_ITEM_SPD_2)
L0E95:	jsr     pushax
	ldx     #$00
	lda     #$12
	jsr     _memcpy
	lda     _menuGameAudio
	bne     L0897
	lda     #<(_TRAIN_DATA_GAMESCREEN+568)
	ldx     #>(_TRAIN_DATA_GAMESCREEN+568)
	jsr     pushax
	lda     #<(_T_MENU_ITEM_AUDIO_1)
	ldx     #>(_T_MENU_ITEM_AUDIO_1)
	jmp     L0E96
L0897:	lda     #<(_TRAIN_DATA_GAMESCREEN+568)
	ldx     #>(_TRAIN_DATA_GAMESCREEN+568)
	jsr     pushax
	lda     #<(_T_MENU_ITEM_AUDIO_2)
	ldx     #>(_T_MENU_ITEM_AUDIO_2)
L0E96:	jsr     pushax
	ldx     #$00
	lda     #$17
	jsr     _memcpy
	lda     _menuCurrentItem
	beq     L08AF
	cmp     #$01
	beq     L08BA
	cmp     #$02
	beq     L08C5
	jmp     L0E8F
L08AF:	lda     #<(_TRAIN_DATA_GAMESCREEN+495)
	ldx     #>(_TRAIN_DATA_GAMESCREEN+495)
	jsr     decax1
	sta     L0876
	stx     L0876+1
	lda     #$0C
	jmp     L0E8E
L08BA:	lda     #<(_TRAIN_DATA_GAMESCREEN+531)
	ldx     #>(_TRAIN_DATA_GAMESCREEN+531)
	jsr     decax1
	sta     L0876
	stx     L0876+1
	lda     #$14
	jmp     L0E8E
L08C5:	lda     #<(_TRAIN_DATA_GAMESCREEN+568)
	ldx     #>(_TRAIN_DATA_GAMESCREEN+568)
	jsr     decax1
	sta     L0876
	stx     L0876+1
	lda     #$19
L0E8E:	sta     L0875
L0E8F:	lda     #$00
	sta     L0874
L0E90:	lda     L0874
	cmp     L0875
	bcs     L08CE
	lda     L0876+1
	sta     sreg+1
	lda     L0876
	sta     sreg
	lda     L0876+1
	sta     ptr1+1
	lda     L0876
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	ora     #$80
	sta     (sreg),y
	inc     L0876
	bne     L08DA
	inc     L0876+1
L08DA:	inc     L0874
	jmp     L0E90
L08CE:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ screenSceneSelection (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_screenSceneSelection: near

.segment	"BSS"

L0A85:
	.res	2,$00
L0A86:
	.res	2,$00
L0A87:
	.res	1,$00
L0A88:
	.res	1,$00
L0A89:
	.res	1,$00
L0A8A:
	.res	1,$00
L0A8B:
	.res	1,$00
L0A8C:
	.res	2,$00

.segment	"CODE"

	jsr     _setSceneSelectionScreen
	jsr     _pmgSetForSceneSelection
	jsr     _clearScreen
	jsr     _clearStatusBar
	lda     #$37
	jsr     pusha
	jsr     _audioRequestSongLine
	lda     #<(_TRAIN_DATA_GAMESCREEN)
	ldx     #>(_TRAIN_DATA_GAMESCREEN)
	sta     L0A85
	stx     L0A85+1
	jsr     incax2
	jsr     pushax
	lda     #<(_T_SCENE_SEL)
	ldx     #>(_T_SCENE_SEL)
	jsr     pushax
	ldx     #$00
	lda     #$10
	jsr     _memcpy
	lda     L0A85
	ldx     L0A85+1
	ldy     #$14
	jsr     incaxy
	lda     #<(_TRAIN_DATA_GAMESCREEN+20)
	ldx     #>(_TRAIN_DATA_GAMESCREEN+20)
	jsr     pushax
	lda     #$59
	jsr     pusha0
	lda     #$28
	jsr     _memset
	lda     #<(_TRAIN_DATA_GAMESCREEN+160)
	ldx     #>(_TRAIN_DATA_GAMESCREEN+160)
	jsr     pushax
	lda     #$59
	jsr     pusha0
	lda     #$28
	jsr     _memset
	lda     #>(_TRAIN_DATA_GAMESCREEN+60)
	sta     L0A85+1
	lda     #<(_TRAIN_DATA_GAMESCREEN+60)
	sta     L0A85
	lda     _gameMaxLevelIndex
	beq     L0EA6
	lda     L0A85
	ldx     L0A85+1
	jsr     pushax
	lda     #<(_T_SCENE_ROW1)
	ldx     #>(_T_SCENE_ROW1)
	jsr     pushax
	ldx     #$00
	lda     #$11
	jsr     _memcpy
	lda     #$14
	clc
	adc     L0A85
	sta     L0A85
	bcc     L0AB2
	inc     L0A85+1
L0AB2:	lda     #$00
	sta     L0A87
L0EA6:	lda     _gameMaxLevelIndex
	cmp     #$05
	bcc     L0EA7
	lda     L0A85
	ldx     L0A85+1
	jsr     pushax
	lda     #<(_T_SCENE_ROW2)
	ldx     #>(_T_SCENE_ROW2)
	jsr     pushax
	ldx     #$00
	lda     #$11
	jsr     _memcpy
	lda     #$14
	clc
	adc     L0A85
	sta     L0A85
	bcc     L0ABE
	inc     L0A85+1
L0ABE:	lda     #$01
	sta     L0A87
L0EA7:	lda     _gameMaxLevelIndex
	cmp     #$0A
	bcc     L0EA8
	lda     L0A85
	ldx     L0A85+1
	jsr     pushax
	lda     #<(_T_SCENE_ROW3)
	ldx     #>(_T_SCENE_ROW3)
	jsr     pushax
	ldx     #$00
	lda     #$11
	jsr     _memcpy
	lda     #$14
	clc
	adc     L0A85
	sta     L0A85
	bcc     L0ACA
	inc     L0A85+1
L0ACA:	lda     #$02
	sta     L0A87
L0EA8:	lda     _gameMaxLevelIndex
	cmp     #$0F
	bcc     L0EA9
	lda     L0A85
	ldx     L0A85+1
	jsr     pushax
	lda     #<(_T_SCENE_ROW4)
	ldx     #>(_T_SCENE_ROW4)
	jsr     pushax
	ldx     #$00
	lda     #$11
	jsr     _memcpy
	lda     #$14
	clc
	adc     L0A85
	sta     L0A85
	bcc     L0AD6
	inc     L0A85+1
L0AD6:	lda     #$03
	sta     L0A87
L0EA9:	lda     _gameMaxLevelIndex
	cmp     #$14
	bcc     L0AD9
	lda     L0A85
	ldx     L0A85+1
	jsr     pushax
	lda     #<(_T_SCENE_ROW5)
	ldx     #>(_T_SCENE_ROW5)
	jsr     pushax
	ldx     #$00
	lda     #$11
	jsr     _memcpy
	lda     #$14
	clc
	adc     L0A85
	sta     L0A85
	bcc     L0AE2
	inc     L0A85+1
L0AE2:	lda     #$04
	sta     L0A87
L0AD9:	lda     #>(_TRAIN_DATA_GAMESCREEN+60)
	sta     L0A86+1
	lda     #<(_TRAIN_DATA_GAMESCREEN+60)
	sta     L0A86
L0AE5:	lda     L0A86
	cmp     #<(_TRAIN_DATA_GAMESCREEN+160)
	lda     L0A86+1
	sbc     #>(_TRAIN_DATA_GAMESCREEN+160)
	bcs     L0AE6
	lda     L0A86+1
	sta     L0A8C+1
	lda     L0A86
	sta     L0A8C
L0AEF:	lda     L0A8C
	ldx     L0A8C+1
	jsr     pushax
	lda     L0A86
	ldx     L0A86+1
	ldy     #$14
	jsr     incaxy
	jsr     tosicmp
	bcs     L0AE7
	lda     L0A8C+1
	sta     ptr1+1
	lda     L0A8C
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	ora     #$40
	sta     (ptr1),y
	lda     L0A8C
	ldx     L0A8C+1
	jsr     incax1
	sta     L0A8C
	stx     L0A8C+1
	jmp     L0AEF
L0AE7:	lda     #$28
	clc
	adc     L0A86
	sta     L0A86
	bcc     L0AE5
	inc     L0A86+1
	jmp     L0AE5
L0AE6:	lda     #<(_TRAIN_DATA_STATUSBARSCREEN+2)
	ldx     #>(_TRAIN_DATA_STATUSBARSCREEN+2)
	jsr     pushax
	lda     #<(_T_SCENE_BEGIN)
	ldx     #>(_T_SCENE_BEGIN)
	jsr     pushax
	ldx     #$00
	lda     #$24
	jsr     _memcpy
	lda     _gameMaxLevelIndex
	jsr     pusha0
	lda     #$05
	jsr     tosumoda0
	sta     L0A88
	lda     _gameMaxLevelIndex
	jsr     pusha0
	lda     #$05
	jsr     tosudiva0
	sta     L0A8B
	lda     _gameMaxLevelIndex
	jsr     pusha0
	lda     #$05
	jsr     tosumoda0
	sta     L0A8A
	lda     L0A85+1
	sta     L0A86+1
	lda     L0A85
	sta     L0A86
	lda     L0A85
	sec
	sbc     #$14
	sta     L0A85
	bcs     L0B0A
	dec     L0A85+1
L0B0A:	lda     #$03
	clc
	adc     L0A85
	sta     L0A85
	bcc     L0B0D
	inc     L0A85+1
L0B0D:	ldx     #$00
	lda     L0A8A
	jsr     incax1
	jsr     mulax3
	clc
	adc     L0A85
	sta     L0A85
	txa
	adc     L0A85+1
	sta     L0A85+1
	lda     L0A85
	ldx     L0A85+1
	jsr     decax3
	sta     L0A8C
	stx     L0A8C+1
	lda     L0A85
	ldx     L0A85+1
	jsr     pushax
	lda     L0A86
	sec
	sbc     L0A85
	pha
	lda     L0A86+1
	sbc     L0A85+1
	tax
	pla
	jsr     __bzero
	lda     L0A8A
	jsr     pusha0
	lda     #$18
	jsr     tosumula0
	ldy     #$42
	jsr     incaxy
	sta     _p0x
	lda     L0A8B
	jsr     pusha0
	lda     #$12
	jsr     tosumula0
	ldy     #$3B
	jsr     incaxy
	sta     _p0y
	lda     _p0x
	sta     $D000
	lda     _p0Area
	ldx     _p0Area+1
	clc
	adc     _p0y
	bcc     L0E97
	inx
L0E97:	jsr     pushax
	lda     #$FE
	jsr     pusha0
	lda     #$14
	jsr     _memset
	lda     L0A8C+1
	sta     ptr1+1
	lda     L0A8C
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	ora     #$80
	sta     (ptr1),y
	lda     L0A8C
	ldx     L0A8C+1
	jsr     incax1
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	ora     #$80
	sta     (ptr1),y
	jsr     _enableDisplay
	jsr     _swapAllControls
	jmp     L0EBD
L0EAA:	lda     $0278
	sta     L0A89
	cmp     #$07
	beq     L0EAC
	cmp     #$0B
	beq     L0EAB
	cmp     #$0D
	jeq     L0EB5
	cmp     #$0E
	beq     L0EB4
	jmp     L0EBD
L0EAB:	lda     L0A8A
	jeq     L0EBD
	dec     L0A8A
	lda     _p0x
	sec
	sbc     #$18
	sta     _p0x
	sta     $D000
	lda     #<(L0A8C)
	ldx     #>(L0A8C)
	jsr     pushax
	lda     #$FD
	jsr     pusha
	jsr     _sceneSelectionMoveHighlight
	lda     #$0A
	jmp     L0EBE
L0EAC:	lda     L0A8A
	cmp     #$04
	jeq     L0EBD
	lda     L0A87
	cmp     L0A8B
	bne     L0EB3
	lda     L0A88
	cmp     L0A8A
	jeq     L0EBD
L0EB3:	inc     L0A8A
	lda     #$18
	clc
	adc     _p0x
	sta     _p0x
	sta     $D000
	lda     #<(L0A8C)
	ldx     #>(L0A8C)
	jsr     pushax
	lda     #$03
	jsr     pusha
	jsr     _sceneSelectionMoveHighlight
	lda     #$0A
	jmp     L0EBE
L0EB4:	lda     L0A8B
	jeq     L0EBD
	lda     _p0Area
	ldx     _p0Area+1
	clc
	adc     _p0y
	bcc     L0E98
	inx
L0E98:	sta     ptr1
	stx     ptr1+1
	lda     #$00
	ldy     #$13
L0E9F:	sta     (ptr1),y
	dey
	bpl     L0E9F
	dec     L0A8B
	lda     _p0y
	sec
	sbc     #$12
	sta     _p0y
	lda     _p0Area
	ldx     _p0Area+1
	clc
	adc     _p0y
	bcc     L0E99
	inx
L0E99:	jsr     pushax
	lda     #$FE
	jsr     pusha0
	lda     #$14
	jsr     _memset
	lda     #<(L0A8C)
	ldx     #>(L0A8C)
	jsr     pushax
	lda     #$EC
	jmp     L0EC1
L0EB5:	lda     L0A87
	cmp     L0A8B
	beq     L0EBD
	ldx     #$00
	lda     L0A87
	jsr     decax1
	cpx     #$00
	bne     L0B7D
	cmp     L0A8B
	bne     L0B7D
	lda     L0A8A
	sec
	sbc     L0A88
	sta     tmp1
	lda     tmp1
	beq     L0B7D
	bcs     L0EBD
L0B7D:	lda     _p0Area
	ldx     _p0Area+1
	clc
	adc     _p0y
	bcc     L0E9A
	inx
L0E9A:	sta     ptr1
	stx     ptr1+1
	lda     #$00
	ldy     #$13
L0EA2:	sta     (ptr1),y
	dey
	bpl     L0EA2
	inc     L0A8B
	lda     #$12
	clc
	adc     _p0y
	sta     _p0y
	lda     _p0Area
	ldx     _p0Area+1
	clc
	adc     _p0y
	bcc     L0E9B
	inx
L0E9B:	jsr     pushax
	lda     #$FE
	jsr     pusha0
	lda     #$14
	jsr     _memset
	lda     #<(L0A8C)
	ldx     #>(L0A8C)
	jsr     pushax
	lda     #$14
L0EC1:	jsr     pusha
	jsr     _sceneSelectionMoveHighlight
	lda     #$09
L0EBE:	jsr     pusha
	jsr     _delay
L0EBD:	lda     $0284
	cmp     #$01
	jeq     L0EAA
	lda     #$49
	jsr     pusha
	jsr     _audioRequestSongLine
	ldx     #$00
	lda     L0A8B
	jsr     mulax5
	clc
	adc     L0A8A
	ldx     #$00
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ clearPlayField (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clearPlayField: near

.segment	"BSS"

L0779:
	.res	2,$00
L077A:
	.res	1,$00

.segment	"CODE"

	lda     #>(_TRAIN_DATA_GAMESCREEN+82)
	sta     L0779+1
	lda     #<(_TRAIN_DATA_GAMESCREEN+82)
	sta     L0779
	lda     #$00
	sta     L077A
L0EC3:	lda     L077A
	cmp     #$14
	bcs     L077F
	lda     L0779+1
	sta     ptr1+1
	lda     L0779
	sta     ptr1
	lda     #$00
	ldy     #$23
L0EC2:	sta     (ptr1),y
	dey
	bpl     L0EC2
	lda     #$28
	clc
	adc     L0779
	sta     L0779
	bcc     L078C
	inc     L0779+1
L078C:	inc     L077A
	jmp     L0EC3
L077F:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ hideLoco (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hideLoco: near

.segment	"CODE"

	lda     #$00
	sta     $D000
	sta     $D001
	sta     $D002
	sta     $D003
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ setGameSpeed (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setGameSpeed: near

.segment	"CODE"

	jsr     _get_tv
	cmp     #$01
	bne     L0DBC
	ldy     #$00
	lda     (sp),y
	tay
	lda     _PALSpeeds,y
	jmp     L0EC4
L0DBC:	ldy     #$00
	lda     (sp),y
	tay
	lda     _NTSCSpeeds,y
L0EC4:	sta     _normalMoveDelay
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ toggleGameInit (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_toggleGameInit: near

.segment	"CODE"

	ldy     #$00
	lda     (sp),y
	bne     L0DC8
	lda     #$03
	sta     _gameInitLives
	lda     #<(_dGameInitScore)
	ldx     #>(_dGameInitScore)
	jsr     pushax
	lda     #$10
	jsr     pusha0
	lda     #$05
	jsr     _memset
	lda     #<(_dGameInitNextLifeScore)
	ldx     #>(_dGameInitNextLifeScore)
	jsr     pushax
	lda     #<(_d5000)
	ldx     #>(_d5000)
	jsr     pushax
	ldx     #$00
	lda     #$05
	jsr     _memcpy
L0DC8:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ expandAndPaintLevel (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_expandAndPaintLevel: near

.segment	"BSS"

L0511:
	.res	2,$00
L0512:
	.res	2,$00
L0513:
	.res	2,$00
L0514:
	.res	1,$00
L0515:
	.res	1,$00
L0516:
	.res	1,$00
L0517:
	.res	1,$00
L0518:
	.res	2,$00

.segment	"CODE"

	ldx     #$00
	lda     (sp,x)
	jsr     pusha0
	lda     #$90
	jsr     tosumula0
	clc
	adc     #<(_TRAIN_GAME_LEVELS)
	sta     L0511
	txa
	adc     #>(_TRAIN_GAME_LEVELS)
	sta     L0511+1
	lda     #>(_TRAIN_GAME_ELEMENTS)
	sta     L0513+1
	lda     #<(_TRAIN_GAME_ELEMENTS)
	sta     L0513
	lda     #$00
	sta     _levelTreasure
	tay
	lda     (sp),y
	cmp     _lastLevelExpanded
	jeq     L0521
	lda     L0511+1
	sta     ptr1+1
	lda     L0511
	sta     ptr1
	lda     (ptr1),y
	sta     $02C8
	lda     L0511
	ldx     L0511+1
	jsr     incax1
	sta     L0511
	stx     L0511+1
	ldx     #$02
	lda     #$C4
	jsr     pushax
	lda     L0511
	ldx     L0511+1
	jsr     pushax
	ldx     #$00
	lda     #$04
	jsr     _memcpy
	lda     #$04
	clc
	adc     L0511
	sta     L0511
	bcc     L052F
	inc     L0511+1
L052F:	jsr     _get_tv
	cmp     #$00
	jne     L0533
	sta     L0514
L0ED5:	lda     L0514
	cmp     #$04
	jcs     L0533
	ldx     #$02
	lda     #$C4
	clc
	adc     L0514
	bcc     L0EC8
	inx
L0EC8:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     L0517
	and     #$F0
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	tya
	clc
	adc     #>(_PAL2NTSC)
	sta     ptr1+1
	ldy     #<(_PAL2NTSC)
	lda     (ptr1),y
	sta     L0517
	ldx     #$02
	lda     #$C4
	clc
	adc     L0514
	bcc     L0EC9
	inx
L0EC9:	sta     sreg
	stx     sreg+1
	ldx     #$02
	lda     #$C4
	clc
	adc     L0514
	bcc     L0ECA
	inx
L0ECA:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	and     #$0F
	sta     ptr1
	lda     L0517
	ora     ptr1
	sta     (sreg),y
	ldx     #$02
	lda     #$C4
	clc
	adc     L0514
	bcc     L0ECB
	inx
L0ECB:	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     L0517
	and     #$0F
	bne     L0ED6
	lda     L0517
	ora     #$02
	sta     L0517
L0ED6:	ldx     #$02
	lda     #$C4
	clc
	adc     L0514
	bcc     L0ECC
	inx
L0ECC:	sta     ptr1
	stx     ptr1+1
	lda     L0517
	sta     (ptr1),y
	inc     L0514
	jmp     L0ED5
L0533:	lda     #>(_inverseMasks)
	sta     ptr1+1
	lda     #<(_inverseMasks)
	sta     ptr1
	lda     #$00
	ldy     #$23
L0ECD:	sta     (ptr1),y
	dey
	bpl     L0ECD
	lda     #<(_TRAIN_DATA_CHARSET1+192)
	ldx     #>(_TRAIN_DATA_CHARSET1+192)
	sta     L0512
	stx     L0512+1
	jsr     pushax
	lda     L0513
	ldx     L0513+1
	jsr     pushax
	lda     L0511+1
	sta     ptr1+1
	lda     L0511
	sta     ptr1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	lda     #$21
	jsr     tosumula0
	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	lda     #$20
	jsr     _memcpy
	lda     L0513
	ldx     L0513+1
	jsr     pushax
	lda     L0511+1
	sta     ptr1+1
	lda     L0511
	sta     ptr1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	lda     #$21
	jsr     tosumula0
	jsr     tosaddax
	jsr     pushax
	lda     #$18
	jsr     pusha
	jsr     _expandMask
	inc     L0511
	bne     L0570
	inc     L0511+1
L0570:	lda     #<(_TRAIN_DATA_CHARSET1+224)
	ldx     #>(_TRAIN_DATA_CHARSET1+224)
	sta     L0512
	stx     L0512+1
	jsr     pushax
	lda     L0513
	ldx     L0513+1
	jsr     pushax
	lda     L0511+1
	sta     ptr1+1
	lda     L0511
	sta     ptr1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	lda     #$21
	jsr     tosumula0
	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	lda     #$20
	jsr     _memcpy
	lda     L0513
	ldx     L0513+1
	jsr     pushax
	lda     L0511+1
	sta     ptr1+1
	lda     L0511
	sta     ptr1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	lda     #$21
	jsr     tosumula0
	jsr     tosaddax
	jsr     pushax
	lda     #$1C
	jsr     pusha
	jsr     _expandMask
	inc     L0511
	bne     L0584
	inc     L0511+1
L0584:	lda     #<(_TRAIN_DATA_CHARSET1+160)
	ldx     #>(_TRAIN_DATA_CHARSET1+160)
	sta     L0512
	stx     L0512+1
	jsr     pushax
	lda     L0513
	ldx     L0513+1
	jsr     pushax
	lda     L0511+1
	sta     ptr1+1
	lda     L0511
	sta     ptr1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	lda     #$21
	jsr     tosumula0
	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	lda     #$20
	jsr     _memcpy
	lda     L0513
	ldx     L0513+1
	jsr     pushax
	lda     L0511+1
	sta     ptr1+1
	lda     L0511
	sta     ptr1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	lda     #$21
	jsr     tosumula0
	jsr     tosaddax
	jsr     pushax
	lda     #$14
	jsr     pusha
	jsr     _expandMask
	inc     L0511
	bne     L0598
	inc     L0511+1
L0598:	lda     #<(_TRAIN_DATA_CHARSET1+256)
	ldx     #>(_TRAIN_DATA_CHARSET1+256)
	sta     L0512
	stx     L0512+1
	jsr     pushax
	lda     L0513
	ldx     L0513+1
	jsr     pushax
	lda     L0511+1
	sta     ptr1+1
	lda     L0511
	sta     ptr1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	lda     #$21
	jsr     tosumula0
	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	lda     #$20
	jsr     _memcpy
	lda     L0513
	ldx     L0513+1
	jsr     pushax
	lda     L0511+1
	sta     ptr1+1
	lda     L0511
	sta     ptr1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	lda     #$21
	jsr     tosumula0
	jsr     tosaddax
	jsr     pushax
	lda     #$20
	jsr     pusha
	jsr     _expandMask
	inc     L0511
	bne     L05AC
	inc     L0511+1
L05AC:	lda     #>(_TRAIN_DATA_CHARSET1+32)
	sta     L0512+1
	lda     #<(_TRAIN_DATA_CHARSET1+32)
	sta     L0512
	lda     #$00
	sta     L0514
L0ED7:	lda     L0514
	cmp     #$04
	jcs     L0ED8
	lda     L0512
	ldx     L0512+1
	jsr     pushax
	lda     L0513
	ldx     L0513+1
	jsr     pushax
	lda     L0511+1
	sta     ptr1+1
	lda     L0511
	sta     ptr1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	lda     #$21
	jsr     tosumula0
	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	lda     #$20
	jsr     _memcpy
	lda     L0513
	ldx     L0513+1
	jsr     pushax
	lda     L0511+1
	sta     ptr1+1
	lda     L0511
	sta     ptr1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	lda     #$21
	jsr     tosumula0
	jsr     tosaddax
	jsr     pushax
	lda     L0514
	asl     a
	asl     a
	clc
	adc     #$04
	jsr     pusha
	jsr     _expandMask
	lda     L0511
	ldx     L0511+1
	jsr     incax1
	sta     L0511
	stx     L0511+1
	lda     #$20
	clc
	adc     L0512
	sta     L0512
	bcc     L05CB
	inc     L0512+1
L05CB:	inc     L0514
	jmp     L0ED7
L0ED8:	lda     #$00
	sta     L0514
L0ED9:	lda     L0514
	cmp     #$04
	jcs     L0613
	lda     L0513
	ldx     L0513+1
	jsr     pushax
	lda     L0511+1
	sta     ptr1+1
	lda     L0511
	sta     ptr1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	lda     #$21
	jsr     tosumula0
	jsr     tosaddax
	sta     L0518
	stx     L0518+1
	ldx     #$00
	lda     L0514
	jsr     aslax4
	jsr     aslax3
	clc
	adc     #<(_TRAIN_DATA_CHARSET1+512)
	tay
	txa
	adc     #>(_TRAIN_DATA_CHARSET1+512)
	tax
	tya
	sta     L0512
	stx     L0512+1
	ldy     #$20
	jsr     incaxy
	jsr     pushax
	lda     L0518
	ldx     L0518+1
	jsr     pushax
	ldx     #$00
	lda     #$20
	jsr     _memcpy
	lda     L0518
	ldx     L0518+1
	jsr     pushax
	ldx     #$00
	lda     L0514
	jsr     aslax4
	ldy     #$44
	jsr     incaxy
	jsr     pusha
	jsr     _expandMask
	lda     L0512
	ldx     L0512+1
	jsr     pushax
	lda     L0518
	ldx     L0518+1
	jsr     pushax
	ldx     #$00
	lda     #$20
	jsr     _memcpy
	lda     L0518
	ldx     L0518+1
	jsr     pushax
	ldx     #$00
	lda     L0514
	jsr     aslax4
	ldy     #$40
	jsr     incaxy
	jsr     pusha
	jsr     _expandMask
	lda     L0512
	ldx     L0512+1
	jsr     pushax
	jsr     _transposeElement
	inc     L0511
	bne     L05F4
	inc     L0511+1
L05F4:	lda     #$21
	clc
	adc     L0518
	sta     L0518
	bcc     L05F8
	inc     L0518+1
L05F8:	lda     L0512
	ldx     L0512+1
	ldy     #$40
	jsr     incaxy
	jsr     pushax
	lda     L0518
	ldx     L0518+1
	jsr     pushax
	ldx     #$00
	lda     #$20
	jsr     _memcpy
	lda     L0518
	ldx     L0518+1
	jsr     pushax
	ldx     #$00
	lda     L0514
	jsr     aslax4
	ldy     #$48
	jsr     incaxy
	jsr     pusha
	jsr     _expandMask
	lda     L0512
	ldx     L0512+1
	ldy     #$60
	jsr     incaxy
	jsr     pushax
	lda     L0518
	ldx     L0518+1
	jsr     pushax
	ldx     #$00
	lda     #$20
	jsr     _memcpy
	lda     L0518
	ldx     L0518+1
	jsr     pushax
	ldx     #$00
	lda     L0514
	jsr     aslax4
	ldy     #$4C
	jsr     incaxy
	jsr     pusha
	jsr     _expandMask
	lda     L0512
	ldx     L0512+1
	ldy     #$60
	jsr     incaxy
	jsr     pushax
	jsr     _transposeElement
	inc     L0511
	bne     L060E
	inc     L0511+1
L060E:	lda     #$21
	clc
	adc     L0518
	sta     L0518
	bcc     L0612
	inc     L0518+1
L0612:	inc     L0514
	jmp     L0ED9
L0521:	lda     #$15
	clc
	adc     L0511
	sta     L0511
	bcc     L0613
	inc     L0511+1
L0613:	lda     L0511+1
	sta     ptr1+1
	lda     L0511
	sta     ptr1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	lda     #$14
	jsr     tosudiva0
	sta     _locoY
	lda     L0511+1
	sta     ptr1+1
	lda     L0511
	sta     ptr1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	lda     #$14
	jsr     tosumoda0
	sta     _locoX
	inc     L0511
	bne     L061C
	inc     L0511+1
L061C:	ldx     #$00
	lda     _locoX
	asl     a
	bcc     L0ED3
	inx
	clc
L0ED3:	adc     #<(_TRAIN_DATA_GAMESCREEN)
	tay
	txa
	adc     #>(_TRAIN_DATA_GAMESCREEN)
	tax
	tya
	jsr     pushax
	lda     _locoY
	jsr     pusha0
	lda     #$50
	jsr     tosumula0
	jsr     tosaddax
	sta     _locoPtr
	stx     _locoPtr+1
	lda     L0511+1
	sta     ptr1+1
	lda     L0511
	sta     ptr1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	lda     #$14
	jsr     tosudiva0
	sta     L0516
	lda     L0511+1
	sta     ptr1+1
	lda     L0511
	sta     ptr1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	lda     #$14
	jsr     tosumoda0
	sta     L0515
	lda     L0511
	ldx     L0511+1
	jsr     incax1
	sta     L0511
	stx     L0511+1
	ldx     #$00
	lda     L0515
	asl     a
	bcc     L0ED4
	inx
	clc
L0ED4:	adc     #<(_TRAIN_DATA_GAMESCREEN)
	tay
	txa
	adc     #>(_TRAIN_DATA_GAMESCREEN)
	tax
	tya
	jsr     pushax
	lda     L0516
	jsr     pusha0
	lda     #$50
	jsr     tosumula0
	jsr     tosaddax
	sta     _doorPtr
	stx     _doorPtr+1
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _inverseMasks+24
	ldy     #$18
	jsr     incaxy
	ldy     #$00
	sta     (ptr1),y
	lda     _doorPtr
	ldx     _doorPtr+1
	jsr     incax1
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _inverseMasks+25
	ldy     #$19
	jsr     incaxy
	ldy     #$00
	sta     (ptr1),y
	lda     _doorPtr
	ldx     _doorPtr+1
	ldy     #$28
	jsr     incaxy
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _inverseMasks+26
	ldy     #$1A
	jsr     incaxy
	ldy     #$00
	sta     (ptr1),y
	lda     _doorPtr
	ldx     _doorPtr+1
	ldy     #$29
	jsr     incaxy
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _inverseMasks+27
	ldy     #$1B
	jsr     incaxy
	ldy     #$00
	sta     (ptr1),y
	lda     L0511+1
	sta     ptr1+1
	lda     L0511
	sta     ptr1
	lda     (ptr1),y
	and     #$0F
	sta     L0517
	cmp     #$07
	beq     L0650
	cmp     #$0B
	beq     L064B
	cmp     #$0D
	beq     L065A
	cmp     #$0E
	beq     L0655
	jmp     L0648
L064B:	lda     #>(_TRAIN_FIGURE_LEFT)
	sta     _levelInitialLocoFigure+1
	lda     #<(_TRAIN_FIGURE_LEFT)
	jmp     L0ED2
L0650:	lda     #>(_TRAIN_FIGURE_RIGHT)
	sta     _levelInitialLocoFigure+1
	lda     #<(_TRAIN_FIGURE_RIGHT)
	jmp     L0ED2
L0655:	lda     #>(_TRAIN_FIGURE_UP)
	sta     _levelInitialLocoFigure+1
	lda     #<(_TRAIN_FIGURE_UP)
	jmp     L0ED2
L065A:	lda     #>(_TRAIN_FIGURE_DOWN)
	sta     _levelInitialLocoFigure+1
	lda     #<(_TRAIN_FIGURE_DOWN)
L0ED2:	sta     _levelInitialLocoFigure
L0648:	lda     L0511+1
	sta     ptr1+1
	lda     L0511
	sta     ptr1
	lda     (ptr1),y
	and     #$F0
	sta     L0517
	sta     _levelFlags
	inc     L0511
	bne     L0664
	inc     L0511+1
L0664:	lda     #>(_TRAIN_DATA_GAMESCREEN)
	sta     L0512+1
	lda     #<(_TRAIN_DATA_GAMESCREEN)
	sta     L0512
	sty     L0516
L0EDA:	lda     L0516
	cmp     #$0C
	bcc     L0EDF
	jmp     incsp1
L0EDF:	lda     #$00
	sta     L0515
L0EDB:	lda     L0515
	cmp     #$14
	jcs     L0670
	and     #$01
	beq     L0677
	lda     L0511+1
	sta     ptr1+1
	lda     L0511
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	and     #$0F
	sta     L0517
	inc     L0511
	bne     L067E
	inc     L0511+1
	jmp     L067E
L0677:	lda     L0511+1
	sta     ptr1+1
	lda     L0511
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	and     #$0F
	sta     L0517
L067E:	lda     L0517
	asl     a
	asl     a
	sta     L0517
	cmp     #$04
	bcc     L0685
	lda     L0517
	cmp     #$11
	bcs     L0685
	inc     _levelTreasure
L0685:	lda     L0512+1
	sta     ptr1+1
	lda     L0512
	sta     ptr1
	ldy     L0517
	lda     _inverseMasks,y
	clc
	adc     L0517
	ldy     #$00
	sta     (ptr1),y
	inc     L0517
	lda     L0512
	ldx     L0512+1
	jsr     incax1
	sta     ptr1
	stx     ptr1+1
	ldy     L0517
	lda     _inverseMasks,y
	clc
	adc     L0517
	ldy     #$00
	sta     (ptr1),y
	inc     L0517
	lda     L0512
	ldx     L0512+1
	ldy     #$28
	jsr     incaxy
	sta     ptr1
	stx     ptr1+1
	ldy     L0517
	lda     _inverseMasks,y
	clc
	adc     L0517
	ldy     #$00
	sta     (ptr1),y
	inc     L0517
	lda     L0512
	ldx     L0512+1
	ldy     #$29
	jsr     incaxy
	sta     ptr1
	stx     ptr1+1
	ldy     L0517
	lda     _inverseMasks,y
	clc
	adc     L0517
	ldy     #$00
	sta     (ptr1),y
	lda     #$02
	clc
	adc     L0512
	sta     L0512
	bcc     L06A4
	inc     L0512+1
L06A4:	inc     L0515
	jmp     L0EDB
L0670:	lda     #$28
	clc
	adc     L0512
	sta     L0512
	bcc     L06A7
	inc     L0512+1
L06A7:	inc     L0516
	jmp     L0EDA

.endproc

; ---------------------------------------------------------------
; void __near__ transposeElement (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_transposeElement: near

.segment	"BSS"

L06A9:
	.res	1,$00
L06AA:
	.res	1,$00
L06AB:
	.res	1,$00
L06AC:
	.res	1,$00

.segment	"CODE"

	lda     #$00
	sta     L06AC
L0EE8:	lda     L06AC
	cmp     #$08
	jcs     L06AE
	jsr     ldax0sp
	ldy     L06AC
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     L06A9
	jsr     ldax0sp
	jsr     incax8
	ldy     L06AC
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     L06AA
	and     #$03
	asl     a
	asl     a
	asl     a
	asl     a
	asl     a
	asl     a
	sta     L06AB
	lda     L06AA
	and     #$0C
	asl     a
	asl     a
	ora     L06AB
	sta     L06AB
	lda     L06AA
	and     #$30
	lsr     a
	lsr     a
	ora     L06AB
	sta     L06AB
	lda     L06AA
	and     #$C0
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	ora     L06AB
	sta     L06AB
	jsr     ldax0sp
	clc
	adc     L06AC
	bcc     L0EE2
	inx
L0EE2:	sta     ptr1
	stx     ptr1+1
	lda     L06AB
	ldy     #$00
	sta     (ptr1),y
	lda     L06A9
	and     #$C0
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     L06AB
	lda     L06A9
	and     #$30
	lsr     a
	lsr     a
	ora     L06AB
	sta     L06AB
	lda     L06A9
	and     #$0C
	asl     a
	asl     a
	ora     L06AB
	sta     L06AB
	lda     L06A9
	and     #$03
	asl     a
	asl     a
	asl     a
	asl     a
	asl     a
	asl     a
	ora     L06AB
	sta     L06AB
	jsr     ldax0sp
	jsr     incax8
	clc
	adc     L06AC
	bcc     L0EE3
	inx
L0EE3:	sta     ptr1
	stx     ptr1+1
	lda     L06AB
	ldy     #$00
	sta     (ptr1),y
	jsr     ldax0sp
	clc
	adc     L06AC
	bcc     L0EE4
	inx
L0EE4:	ldy     #$10
	jsr     incaxy
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     L06A9
	jsr     ldax0sp
	ldy     #$18
	jsr     incaxy
	ldy     L06AC
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     L06AA
	and     #$03
	asl     a
	asl     a
	asl     a
	asl     a
	asl     a
	asl     a
	sta     L06AB
	lda     L06AA
	and     #$0C
	asl     a
	asl     a
	ora     L06AB
	sta     L06AB
	lda     L06AA
	and     #$30
	lsr     a
	lsr     a
	ora     L06AB
	sta     L06AB
	lda     L06AA
	and     #$C0
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	ora     L06AB
	sta     L06AB
	jsr     ldax0sp
	clc
	adc     L06AC
	bcc     L0EE6
	inx
L0EE6:	ldy     #$10
	jsr     incaxy
	sta     ptr1
	stx     ptr1+1
	lda     L06AB
	ldy     #$00
	sta     (ptr1),y
	lda     L06A9
	and     #$C0
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     L06AB
	lda     L06A9
	and     #$30
	lsr     a
	lsr     a
	ora     L06AB
	sta     L06AB
	lda     L06A9
	and     #$0C
	asl     a
	asl     a
	ora     L06AB
	sta     L06AB
	lda     L06A9
	and     #$03
	asl     a
	asl     a
	asl     a
	asl     a
	asl     a
	asl     a
	ora     L06AB
	sta     L06AB
	jsr     ldax0sp
	ldy     #$18
	jsr     incaxy
	clc
	adc     L06AC
	bcc     L0EE7
	inx
L0EE7:	sta     ptr1
	stx     ptr1+1
	lda     L06AB
	ldy     #$00
	sta     (ptr1),y
	inc     L06AC
	jmp     L0EE8
L06AE:	jsr     ldax0sp
	sec
	sbc     #<(_TRAIN_DATA_CHARSET1)
	pha
	txa
	sbc     #>(_TRAIN_DATA_CHARSET1)
	tax
	pla
	jsr     asrax3
	sta     L06A9
	clc
	adc     #$01
	sta     L06AA
	ldy     L06A9
	lda     _inverseMasks,y
	sta     L06AB
	lda     #<(_inverseMasks)
	ldx     #>(_inverseMasks)
	clc
	adc     L06A9
	bcc     L0708
	inx
L0708:	sta     ptr1
	stx     ptr1+1
	ldy     L06AA
	lda     _inverseMasks,y
	ldy     #$00
	sta     (ptr1),y
	ldy     L06AA
	lda     L06AB
	sta     _inverseMasks,y
	lda     #$02
	clc
	adc     L06A9
	sta     L06A9
	lda     #$02
	clc
	adc     L06AA
	sta     L06AA
	ldy     L06A9
	lda     _inverseMasks,y
	sta     L06AB
	lda     #<(_inverseMasks)
	ldx     #>(_inverseMasks)
	clc
	adc     L06A9
	bcc     L071A
	inx
L071A:	sta     ptr1
	stx     ptr1+1
	ldy     L06AA
	lda     _inverseMasks,y
	ldy     #$00
	sta     (ptr1),y
	ldy     L06AA
	lda     L06AB
	sta     _inverseMasks,y
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ eraseElement (__near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_eraseElement: near

.segment	"CODE"

	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	tax
	lda     #$01
	jsr     addeq0sp
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	tax
	lda     #$27
	jsr     addeq0sp
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	tax
	lda     #$01
	jsr     addeq0sp
	jsr     ldax0sp
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ expandMask (__near__ unsigned char *, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_expandMask: near

.segment	"BSS"

L0723:
	.res	2,$00
L0724:
	.res	1,$00
L0726:
	.res	1,$00

.segment	"CODE"

	lda     #$80
	sta     L0724
	ldy     #$01
	ldx     #$00
	lda     #$20
	jsr     addeqysp
	ldy     #$00
	lda     (sp),y
	clc
	adc     #<(_inverseMasks)
	sta     L0723
	tya
	adc     #>(_inverseMasks)
	sta     L0723+1
	sty     L0726
L0EEA:	lda     L0726
	cmp     #$04
	bcs     L072C
	ldy     #$02
	jsr     ldaxysp
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     ptr1
	lda     L0724
	and     ptr1
	pha
	pla
	beq     L0733
	lda     L0723+1
	sta     ptr1+1
	lda     L0723
	sta     ptr1
	lda     #$80
	jmp     L0EE9
L0733:	lda     L0723+1
	sta     ptr1+1
	lda     L0723
	sta     ptr1
	tya
L0EE9:	sta     (ptr1),y
	inc     L0723
	bne     L073C
	inc     L0723+1
L073C:	lda     L0724
	lsr     a
	sta     L0724
	inc     L0726
	jmp     L0EEA
L072C:	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ paintGameStatusBar (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_paintGameStatusBar: near

.segment	"CODE"

	lda     #<(_TRAIN_DATA_STATUSBARSCREEN)
	ldx     #>(_TRAIN_DATA_STATUSBARSCREEN)
	jsr     pushax
	lda     #<(_T_SCORE_BAR)
	ldx     #>(_T_SCORE_BAR)
	jsr     pushax
	ldx     #$00
	lda     #$28
	jsr     _memcpy
	lda     _gameScorePtr
	ldx     _gameScorePtr+1
	jsr     pushax
	lda     #<(_dScore)
	ldx     #>(_dScore)
	jsr     pushax
	ldx     #$00
	lda     #$05
	jsr     _memcpy
	lda     _gameLivesPtr+1
	sta     ptr1+1
	lda     _gameLivesPtr
	sta     ptr1
	ldx     #$00
	lda     _gameLives
	ldy     #$10
	jsr     incaxy
	ldy     #$00
	sta     (ptr1),y
	lda     _gameLevelPtr
	ldx     _gameLevelPtr+1
	jsr     pushax
	ldx     #$00
	lda     _gameLevelIndex
	jsr     incax1
	jsr     pushax
	lda     #$0A
	jsr     tosudiva0
	ldy     #$10
	jsr     incaxy
	ldy     #$00
	jsr     staspidx
	lda     _gameLevelPtr
	ldx     _gameLevelPtr+1
	jsr     incax1
	jsr     pushax
	ldx     #$00
	lda     _gameLevelIndex
	jsr     incax1
	jsr     pushax
	lda     #$0A
	jsr     tosumoda0
	ldy     #$10
	jsr     incaxy
	ldy     #$00
	jmp     staspidx

.endproc

; ---------------------------------------------------------------
; void __near__ decimalDisplaysInit (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_decimalDisplaysInit: near

.segment	"CODE"

	lda     #>(_TRAIN_DATA_STATUSBARSCREEN+6)
	sta     _gameScorePtr+1
	lda     #<(_TRAIN_DATA_STATUSBARSCREEN+6)
	sta     _gameScorePtr
	lda     #>(_TRAIN_DATA_STATUSBARSCREEN+39)
	sta     _gameLivesPtr+1
	lda     #<(_TRAIN_DATA_STATUSBARSCREEN+39)
	sta     _gameLivesPtr
	lda     #>(_TRAIN_DATA_STATUSBARSCREEN+24)
	sta     _gameLevelPtr+1
	lda     #<(_TRAIN_DATA_STATUSBARSCREEN+24)
	sta     _gameLevelPtr
	lda     #>(_TRAIN_DATA_STATUSBARSCREEN+11)
	sta     _lastScorePtr+1
	lda     #<(_TRAIN_DATA_STATUSBARSCREEN+11)
	sta     _lastScorePtr
	lda     #>(_TRAIN_DATA_STATUSBARSCREEN+34)
	sta     _highScorePtr+1
	lda     #<(_TRAIN_DATA_STATUSBARSCREEN+34)
	sta     _highScorePtr
	jmp     _resetZonedScore

.endproc

; ---------------------------------------------------------------
; void __near__ resetZonedScore (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_resetZonedScore: near

.segment	"CODE"

	lda     #<(_dScore)
	ldx     #>(_dScore)
	jsr     pushax
	lda     #$10
	jsr     pusha0
	lda     #$05
	jmp     _memset

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ updateMenuScores (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateMenuScores: near

.segment	"CODE"

	lda     #<(_dLastScore)
	ldx     #>(_dLastScore)
	jsr     pushax
	lda     #<(_dScore)
	ldx     #>(_dScore)
	jsr     pushax
	ldx     #$00
	lda     #$05
	jsr     _memcpy
	lda     #<(_dLastScore)
	ldx     #>(_dLastScore)
	jsr     pushax
	lda     #<(_dHighScore)
	ldx     #>(_dHighScore)
	jsr     pushax
	ldx     #$00
	lda     #$05
	jsr     _memcmp
	cmp     #$01
	txa
	sbc     #$00
	bvs     L0D7B
	eor     #$80
L0D7B:	asl     a
	lda     #$00
	tax
	bcc     L0EEC
	lda     #<(_dHighScore)
	ldx     #>(_dHighScore)
	jsr     pushax
	lda     #<(_dLastScore)
	ldx     #>(_dLastScore)
	jsr     pushax
	ldx     #$00
	lda     #$05
	jsr     _memcpy
	ldx     #$00
	lda     #$01
	rts
L0EEC:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ incrementNextLifeScore (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_incrementNextLifeScore: near

.segment	"CODE"

	lda     _dNextLifeScore+2
	cmp     #$15
	bne     L0EEE
	lda     #$10
	sta     _dNextLifeScore+2
	lda     _dNextLifeScore+1
	cmp     #$19
	bne     L0EED
	lda     #$10
	sta     _dNextLifeScore+1
	inc     _dNextLifeScore
	rts
L0EED:	inc     _dNextLifeScore+1
	rts
L0EEE:	lda     #$15
	sta     _dNextLifeScore+2
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ pmgInit (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pmgInit: near

.segment	"CODE"

	ldx     #>(_TRAIN_DATA_PMGAREA)
	stx     $D407
	lda     #<(_TRAIN_DATA_PMGAREA)
	ldx     #>(_TRAIN_DATA_PMGAREA)
	jsr     pushax
	ldx     #$08
	lda     #$00
	jsr     __bzero
	lda     #$02
	sta     $D01D
	lda     #>(_TRAIN_DATA_PMGAREA+1024)
	sta     _p0Area+1
	lda     #<(_TRAIN_DATA_PMGAREA+1024)
	sta     _p0Area
	lda     #>(_TRAIN_DATA_PMGAREA+1280)
	sta     _p1Area+1
	lda     #<(_TRAIN_DATA_PMGAREA+1280)
	sta     _p1Area
	lda     #>(_TRAIN_DATA_PMGAREA+1536)
	sta     _p2Area+1
	lda     #<(_TRAIN_DATA_PMGAREA+1536)
	sta     _p2Area
	lda     #>(_TRAIN_DATA_PMGAREA+1792)
	sta     _p3Area+1
	lda     #<(_TRAIN_DATA_PMGAREA+1792)
	sta     _p3Area
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ setLocoPos (unsigned char, unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setLocoPos: near

.segment	"CODE"

	ldy     #$01
	ldx     #$00
	lda     (sp),y
	ldy     #$30
	jsr     incaxy
	jsr     pushax
	ldy     #$05
	ldx     #$00
	lda     (sp),y
	jsr     aslax3
	jsr     tosaddax
	sta     _p0x
	lda     _p0y
	jsr     pusha0
	lda     _p0Area
	ldx     _p0Area+1
	jsr     swapstk
	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	lda     #$10
	jsr     __bzero
	lda     _p0y
	jsr     pusha0
	lda     _p1Area
	ldx     _p1Area+1
	jsr     swapstk
	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	lda     #$10
	jsr     __bzero
	lda     _p0y
	jsr     pusha0
	lda     _p2Area
	ldx     _p2Area+1
	jsr     swapstk
	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	lda     #$10
	jsr     __bzero
	lda     _p0y
	jsr     pusha0
	lda     _p3Area
	ldx     _p3Area+1
	jsr     swapstk
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	ldy     #$0F
L0EEF:	sta     (ptr1),y
	dey
	bpl     L0EEF
	ldx     #$00
	lda     (sp,x)
	ldy     #$18
	jsr     incaxy
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	ldy     #$02
	lda     (sp),y
	jsr     aslax4
	clc
	adc     ptr1
	sta     _p0y
	txa
	adc     ptr1+1
	lda     _p0x
	sta     $D000
	lda     _p0x
	sta     $D001
	lda     _p0x
	sta     $D002
	lda     _p0x
	sta     $D003
	jsr     _repaintLoco
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ locoMove (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_locoMove: near

.segment	"CODE"

	ldx     #$00
	lda     (sp,x)
	cmp     #$07
	beq     L0EF4
	cmp     #$0B
	beq     L0EF3
	cmp     #$0D
	jeq     L0EF6
	cmp     #$0E
	beq     L0EF5
	jmp     incsp1
L0EF3:	lda     _p0x
	sec
	sbc     #$08
	sta     _p0x
	sta     $D000
	lda     _p0x
	sta     $D001
	lda     _p0x
	sta     $D002
	lda     _p0x
	sta     $D003
	dec     _locoX
	jmp     incsp1
L0EF4:	lda     #$08
	clc
	adc     _p0x
	sta     _p0x
	sta     $D000
	lda     _p0x
	sta     $D001
	lda     _p0x
	sta     $D002
	lda     _p0x
	sta     $D003
	inc     _locoX
	jmp     incsp1
L0EF5:	lda     _p0y
	jsr     pusha0
	lda     _p0Area
	ldx     _p0Area+1
	jsr     swapstk
	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	lda     #$10
	jsr     __bzero
	lda     _p0y
	jsr     pusha0
	lda     _p1Area
	ldx     _p1Area+1
	jsr     swapstk
	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	lda     #$10
	jsr     __bzero
	lda     _p0y
	jsr     pusha0
	lda     _p2Area
	ldx     _p2Area+1
	jsr     swapstk
	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	lda     #$10
	jsr     __bzero
	lda     _p0y
	jsr     pusha0
	lda     _p3Area
	ldx     _p3Area+1
	jsr     swapstk
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	ldy     #$0F
L0EF0:	sta     (ptr1),y
	dey
	bpl     L0EF0
	lda     _p0y
	sec
	sbc     #$10
	sta     _p0y
	dec     _locoY
	jmp     L0EF2
L0EF6:	lda     _p0y
	jsr     pusha0
	lda     _p0Area
	ldx     _p0Area+1
	jsr     swapstk
	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	lda     #$10
	jsr     __bzero
	lda     _p0y
	jsr     pusha0
	lda     _p1Area
	ldx     _p1Area+1
	jsr     swapstk
	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	lda     #$10
	jsr     __bzero
	lda     _p0y
	jsr     pusha0
	lda     _p2Area
	ldx     _p2Area+1
	jsr     swapstk
	jsr     tosaddax
	jsr     pushax
	ldx     #$00
	lda     #$10
	jsr     __bzero
	lda     _p0y
	jsr     pusha0
	lda     _p3Area
	ldx     _p3Area+1
	jsr     swapstk
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	ldy     #$0F
L0EF1:	sta     (ptr1),y
	dey
	bpl     L0EF1
	lda     #$10
	clc
	adc     _p0y
	sta     _p0y
	inc     _locoY
L0EF2:	jsr     _repaintLoco
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ repaintLoco (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_repaintLoco: near

.segment	"CODE"

	lda     _p0y
	jsr     pusha0
	lda     _p0Area
	ldx     _p0Area+1
	jsr     swapstk
	jsr     tosaddax
	jsr     pushax
	lda     _trainData
	ldx     _trainData+1
	jsr     pushax
	ldx     #$00
	lda     #$10
	jsr     _memcpy
	lda     _p0y
	jsr     pusha0
	lda     _p1Area
	ldx     _p1Area+1
	jsr     swapstk
	jsr     tosaddax
	jsr     pushax
	lda     _trainData
	ldx     _trainData+1
	ldy     #$10
	jsr     incaxy
	jsr     pushax
	ldx     #$00
	lda     #$10
	jsr     _memcpy
	lda     _p0y
	jsr     pusha0
	lda     _p2Area
	ldx     _p2Area+1
	jsr     swapstk
	jsr     tosaddax
	jsr     pushax
	lda     _trainData
	ldx     _trainData+1
	ldy     #$20
	jsr     incaxy
	jsr     pushax
	ldx     #$00
	lda     #$10
	jsr     _memcpy
	lda     _p0y
	jsr     pusha0
	lda     _p3Area
	ldx     _p3Area+1
	jsr     swapstk
	jsr     tosaddax
	jsr     pushax
	lda     _trainData
	ldx     _trainData+1
	ldy     #$30
	jsr     incaxy
	jsr     pushax
	ldx     #$00
	lda     #$10
	jmp     _memcpy

.endproc

; ---------------------------------------------------------------
; void __near__ pmgSetForLoco (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pmgSetForLoco: near

.segment	"CODE"

	lda     #<(_TRAIN_DATA_PMGAREA)
	ldx     #>(_TRAIN_DATA_PMGAREA)
	jsr     pushax
	ldx     #$08
	lda     #$00
	jsr     __bzero
	lda     #$00
	sta     _p0x
	sta     _p0y
	jsr     _pmgSetDefaultLocoColors
	ldx     #$D0
	lda     #$08
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	ldy     #$03
L0EF7:	sta     (ptr1),y
	dey
	bpl     L0EF7
	lda     #$01
	sta     $026F
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ pmgSetForSceneSelection (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pmgSetForSceneSelection: near

.segment	"CODE"

	lda     #<(_TRAIN_DATA_PMGAREA)
	ldx     #>(_TRAIN_DATA_PMGAREA)
	jsr     pushax
	ldx     #$08
	lda     #$00
	jsr     __bzero
	lda     #$03
	sta     $D008
	lda     #$04
	sta     $026F
	lda     #$24
	sta     $02C0
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ pmgSetDefaultLocoColors (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pmgSetDefaultLocoColors: near

.segment	"CODE"

	lda     #$26
	sta     $02C0
	lda     #$EC
	sta     $02C1
	lda     #$74
	sta     $02C2
	lda     #$72
	sta     $02C3
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ delay (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_delay: near

.segment	"BSS"

L09E0:
	.res	1,$00
L09EA:
	.res	1,$00

.segment	"CODE"

	lda     #$00
	sta     L09E0
	sta     L09E0
L0EF9:	lda     L09E0
	ldy     #$00
	cmp     (sp),y
	bcs     L09E3
	lda     $0014
	sta     L09EA
L0EFA:	lda     L09EA
	cmp     $0014
	beq     L0EFA
	inc     L09E0
	jmp     L0EF9
L09E3:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ setScreen (__near__ void *, unsigned char, unsigned char, __near__ void *, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setScreen: near

.segment	"CODE"

	lda     #$00
	sta     $022F
	lda     #$01
	jsr     pusha
	jsr     _verticalSync
	ldy     #$04
	lda     (sp),y
	sta     $02C4
	dey
	lda     (sp),y
	sta     $02C5
	dey
	lda     (sp),y
	sta     $02C6
	dey
	lda     (sp),y
	sta     $02C7
	dey
	lda     (sp),y
	sta     $02C8
	ldy     #$05
	lda     (sp),y
	sta     $02F4
	sei
	ldy     #$0A
	lda     (sp),y
	sta     $0230
	iny
	lda     (sp),y
	sta     $0231
	cli
	lda     #$01
	jsr     pusha
	jsr     _verticalSync
	ldy     #$09
	lda     (sp),y
	sta     _statusBarForeground
	dey
	lda     (sp),y
	sta     _statusBarBackground
	ldy     #$06
	lda     (sp),y
	sta     $0200
	iny
	lda     (sp),y
	sta     $0201
	lda     #$01
	jsr     pusha
	jsr     _verticalSync
	lda     #$C0
	sta     $D40E
	ldy     #$0C
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ enableDisplay (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enableDisplay: near

.segment	"CODE"

	lda     #$3E
	sta     $022F
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ disableDisplay (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_disableDisplay: near

.segment	"CODE"

	lda     #$00
	sta     $022F
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fadeInAndOut (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fadeInAndOut: near

.segment	"BSS"

L0DD8:
	.res	1,$00

.segment	"CODE"

	lda     #$00
L0EFB:	sta     L0DD8
	cmp     #$10
	bcs     L0EFD
	lda     L0DD8
	sta     $02C8
	lda     #$03
	jsr     pusha
	jsr     _verticalSync
	lda     #$02
	clc
	adc     L0DD8
	jmp     L0EFB
L0EFD:	lda     #$00
L0EFC:	sta     L0DD8
	cmp     #$10
	bcs     L0DEA
	lda     #$0E
	sec
	sbc     L0DD8
	sta     $02C8
	lda     #$03
	jsr     pusha
	jsr     _verticalSync
	lda     #$02
	clc
	adc     L0DD8
	jmp     L0EFC
L0DEA:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ levelFadeOut (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_levelFadeOut: near

.segment	"BSS"

L0E0B:
	.res	1,$00
L0E0C:
	.res	1,$00
L0E0D:
	.res	2,$00
L0E0E:
	.res	1,$00

.segment	"CODE"

	lda     #$01
	jsr     pusha
	jsr     _verticalSync
	lda     #$00
	sta     L0E0B
L0EFE:	lda     L0E0B
	cmp     #$10
	bcc     L0F01
	rts
L0F01:	lda     #$00
	sta     L0E0E
	ldx     #$02
	lda     #$C0
	sta     L0E0D
	stx     L0E0D+1
	lda     #$00
	sta     L0E0C
L0EFF:	lda     L0E0C
	cmp     #$09
	bcs     L0F00
	lda     L0E0D+1
	sta     ptr1+1
	lda     L0E0D
	sta     ptr1
	ldx     #$00
	lda     (ptr1,x)
	jsr     pusha0
	lda     L0E0D+1
	sta     ptr1+1
	lda     L0E0D
	sta     ptr1
	lda     (ptr1,x)
	and     #$F0
	jsr     tosicmp0
	bcc     L0E25
	beq     L0E25
	lda     L0E0D+1
	sta     ptr1+1
	lda     L0E0D
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$02
	sta     (ptr1),y
	jmp     L0E2B
L0E25:	inc     L0E0E
L0E2B:	lda     L0E0D
	ldx     L0E0D+1
	jsr     incax1
	sta     L0E0D
	stx     L0E0D+1
	inc     L0E0C
	jmp     L0EFF
L0F00:	lda     L0E0E
	cmp     #$09
	beq     L0E12
	lda     #$03
	jsr     pusha
	jsr     _verticalSync
	inc     L0E0B
	jmp     L0EFE
L0E12:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ levelFadeIn (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_levelFadeIn: near

.segment	"BSS"

L0E33:
	.res	1,$00
L0E34:
	.res	1,$00
L0E35:
	.res	1,$00
L0E37:
	.res	9,$00
L0E39:
	.res	5,$00

.segment	"CODE"

	lda     #<(L0E37)
	ldx     #>(L0E37)
	jsr     pushax
	ldx     #$02
	lda     #$C0
	jsr     pushax
	ldx     #$00
	lda     #$09
	jsr     _memcpy
	lda     #$00
	sta     L0E33
L0F04:	lda     L0E33
	cmp     #$05
	bcs     L0E3F
	lda     #<(L0E39)
	ldx     #>(L0E39)
	clc
	adc     L0E33
	bcc     L0E48
	inx
L0E48:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     L0E33
	jsr     incax4
	sta     ptr1
	txa
	clc
	adc     #>(L0E37)
	sta     ptr1+1
	ldy     #<(L0E37)
	lda     (ptr1),y
	and     #$F0
	ldy     #$00
	sta     (sreg),y
	inc     L0E33
	jmp     L0F04
L0E3F:	ldx     #$02
	lda     #$C4
	jsr     pushax
	lda     #<(L0E39)
	ldx     #>(L0E39)
	jsr     pushax
	ldx     #$00
	lda     #$05
	jsr     _memcpy
	ldx     #$02
	lda     #$C0
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	ldy     #$03
L0F02:	sta     (ptr1),y
	dey
	bpl     L0F02
	lda     #$01
	jsr     pusha
	jsr     _verticalSync
	jsr     _enableDisplay
	lda     #$00
	sta     L0E33
L0F05:	lda     L0E33
	cmp     #$10
	jcs     L0E57
	lda     #$00
	sta     L0E35
	sta     L0E34
L0F06:	lda     L0E34
	cmp     #$05
	bcs     L0F08
	ldy     L0E34
	lda     L0E39,y
	jsr     pusha0
	lda     L0E34
	jsr     incax4
	sta     ptr1
	txa
	clc
	adc     #>(L0E37)
	sta     ptr1+1
	ldy     #<(L0E37)
	lda     (ptr1),y
	jsr     tosicmp0
	bcs     L0E68
	lda     #<(L0E39)
	ldx     #>(L0E39)
	clc
	adc     L0E34
	bcc     L0E6F
	inx
L0E6F:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
	ldx     #$02
	lda     #$C4
	clc
	adc     L0E34
	bcc     L0F03
	inx
L0F03:	sta     ptr1
	stx     ptr1+1
	ldy     L0E34
	lda     L0E39,y
	ldy     #$00
	sta     (ptr1),y
	jmp     L0F07
L0E68:	inc     L0E35
L0F07:	inc     L0E34
	jmp     L0F06
L0F08:	lda     L0E35
	cmp     #$05
	beq     L0E57
	lda     #$03
	jsr     pusha
	jsr     _verticalSync
	inc     L0E33
	jmp     L0F05
L0E57:	ldx     #$02
	lda     #$C0
	jsr     pushax
	lda     #<(L0E37)
	ldx     #>(L0E37)
	jsr     pushax
	ldx     #$00
	lda     #$04
	jmp     _memcpy

.endproc

; ---------------------------------------------------------------
; void __near__ verticalSync (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_verticalSync: near

.segment	"BSS"

L0DFA:
	.res	2,$00

.segment	"CODE"

	lda     #$00
	sta     L0DFA
	sta     L0DFA+1
	sta     L0DFA
	sta     L0DFA+1
L0DFC:	lda     L0DFA
	ldy     #$00
	cmp     (sp),y
	lda     L0DFA+1
	sbc     #$00
	bcs     L0DFD
	lda     20
@vsync_VSYNC_0:
	cmp     20
	beq     @vsync_VSYNC_0
	lda     L0DFA
	ldx     L0DFA+1
	jsr     incax1
	sta     L0DFA
	stx     L0DFA+1
	jmp     L0DFC
L0DFD:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ audioRequestSongLine (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_audioRequestSongLine: near

.segment	"CODE"

	ldy     #$00
	lda     (sp),y
	sta     _songLineRequested
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ audioRequestSFX (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_audioRequestSFX: near

.segment	"CODE"

	ldy     #$00
	lda     (sp),y
	sta     _sfxRequested
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ audioSetInGameFlag (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_audioSetInGameFlag: near

.segment	"CODE"

	ldy     #$00
	lda     (sp),y
	sta     _inGameAudioFlag
	lda     #$02
	jsr     pusha
	jsr     _verticalSync
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ audioSetForSilence (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_audioSetForSilence: near

.segment	"CODE"

	lda     #$49
	sta     _songLineRequested
	lda     #$00
	sta     _sfxRequested
	lda     #$02
	jsr     pusha
	jmp     _verticalSync

.endproc

; ---------------------------------------------------------------
; void __near__ audioStopInGameAudio (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_audioStopInGameAudio: near

.segment	"CODE"

	lda     #$00
	sta     _inGameAudioFlag
	sta     _sfxRequested
	lda     #$49
	sta     _songLineRequested
	lda     #$02
	jsr     pusha
	jmp     _verticalSync

.endproc

; ---------------------------------------------------------------
; void __near__ updateTrainArray (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_updateTrainArray: near

.segment	"CODE"

	lda     #<(_trainDirectionArray+1)
	ldx     #>(_trainDirectionArray+1)
	jsr     pushax
	lda     #<(_trainDirectionArray)
	ldx     #>(_trainDirectionArray)
	jsr     pushax
	lda     _levelTrainLength
	ldx     #$00
	jsr     _memmove
	ldy     #$00
	lda     (sp),y
	sta     _trainDirectionArray
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ drawTrainCars (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawTrainCars: near

.segment	"CODE"

	lda     _locoPtr+1
	sta     _zp_ptr1+1
	lda     _locoPtr
	sta     _zp_ptr1
	lda     #>(_trainCarArray)
	sta     _zp_ptr2+1
	lda     #<(_trainCarArray)
	sta     _zp_ptr2
	lda     #>(_trainDirectionArray)
	sta     _zp_ptr3+1
	lda     #<(_trainDirectionArray)
	sta     _zp_ptr3
	lda     #$00
	sta     _zp_z1
L0F0C:	lda     _zp_z1
	cmp     _levelTrainLength
	jcs     L04D5
	lda     _zp_ptr2+1
	sta     ptr1+1
	lda     _zp_ptr2
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	sta     sreg
	lda     _zp_ptr3+1
	sta     ptr1+1
	lda     _zp_ptr3
	sta     ptr1
	lda     (ptr1),y
	asl     a
	asl     a
	clc
	adc     sreg
	sta     _zp_x1
	lda     _zp_ptr1+1
	sta     ptr1+1
	lda     _zp_ptr1
	sta     ptr1
	ldy     _zp_x1
	lda     _inverseMasks,y
	ora     _zp_x1
	ldy     #$00
	sta     (ptr1),y
	inc     _zp_x1
	lda     _zp_ptr1
	ldx     _zp_ptr1+1
	jsr     incax1
	sta     ptr1
	stx     ptr1+1
	ldy     _zp_x1
	lda     _inverseMasks,y
	ora     _zp_x1
	ldy     #$00
	sta     (ptr1),y
	inc     _zp_x1
	lda     _zp_ptr1
	ldx     _zp_ptr1+1
	ldy     #$28
	jsr     incaxy
	sta     ptr1
	stx     ptr1+1
	ldy     _zp_x1
	lda     _inverseMasks,y
	ora     _zp_x1
	ldy     #$00
	sta     (ptr1),y
	inc     _zp_x1
	lda     _zp_ptr1
	ldx     _zp_ptr1+1
	ldy     #$29
	jsr     incaxy
	sta     ptr1
	stx     ptr1+1
	ldy     _zp_x1
	lda     _inverseMasks,y
	ora     _zp_x1
	ldy     #$00
	sta     (ptr1),y
	lda     _zp_ptr3
	ldx     _zp_ptr3+1
	jsr     incax1
	sta     _zp_ptr3
	stx     _zp_ptr3+1
	lda     _zp_ptr3+1
	sta     ptr1+1
	lda     _zp_ptr3
	sta     ptr1
	ldx     #$00
	lda     (ptr1),y
	asl     a
	bcc     L0F0B
	inx
	clc
L0F0B:	adc     #<(_directionReverseUpdate)
	tay
	txa
	adc     #>(_directionReverseUpdate)
	tax
	tya
	jsr     ldaxi
	clc
	adc     _zp_ptr1
	sta     _zp_ptr1
	txa
	adc     _zp_ptr1+1
	sta     _zp_ptr1+1
	lda     _zp_ptr2
	ldx     _zp_ptr2+1
	jsr     incax1
	sta     _zp_ptr2
	stx     _zp_ptr2+1
	inc     _zp_z1
	jmp     L0F0C
L04D5:	ldy     #$00
	lda     (sp),y
	beq     L04CD
	sty     _zp_x1
	lda     _zp_ptr1+1
	sta     ptr1+1
	lda     _zp_ptr1
	sta     ptr1
	lda     _zp_x1
	sta     (ptr1),y
	inc     _zp_ptr1
	bne     L0504
	inc     _zp_ptr1+1
L0504:	lda     _zp_ptr1+1
	sta     ptr1+1
	lda     _zp_ptr1
	sta     ptr1
	lda     _zp_x1
	sta     (ptr1),y
	lda     #$27
	clc
	adc     _zp_ptr1
	sta     _zp_ptr1
	bcc     L0509
	inc     _zp_ptr1+1
L0509:	lda     _zp_ptr1+1
	sta     ptr1+1
	lda     _zp_ptr1
	sta     ptr1
	lda     _zp_x1
	sta     (ptr1),y
	inc     _zp_ptr1
	bne     L050D
	inc     _zp_ptr1+1
L050D:	lda     _zp_ptr1+1
	sta     ptr1+1
	lda     _zp_ptr1
	sta     ptr1
	lda     _zp_x1
	sta     (ptr1),y
L04CD:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ gameToNextLevel (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_gameToNextLevel: near

.segment	"BSS"

L0C88:
	.res	1,$00
L0C89:
	.res	1,$00

.segment	"CODE"

	lda     #>(_TRAIN_DATA_STATUSBARSCREEN+14)
	sta     ptr1+1
	lda     #<(_TRAIN_DATA_STATUSBARSCREEN+14)
	sta     ptr1
	lda     #$00
	ldy     #$19
L0F0D:	sta     (ptr1),y
	dey
	bpl     L0F0D
	lda     #<(_TRAIN_DATA_STATUSBARSCREEN+19)
	ldx     #>(_TRAIN_DATA_STATUSBARSCREEN+19)
	jsr     pushax
	lda     #<(_T_LEVEL_COMPLETE)
	ldx     #>(_T_LEVEL_COMPLETE)
	jsr     pushax
	ldx     #$00
	lda     #$10
	jsr     _memcpy
	lda     #$08
	jsr     pusha
	jsr     _audioRequestSFX
	ldx     #$00
	lda     _gameLives
	jsr     mulax10
	sta     L0C89
	lda     #$00
	sta     L0C88
L0F0E:	lda     L0C88
	cmp     L0C89
	bcs     L0C9A
	jsr     _incrementScore
	jsr     _incrementScore
	lda     20
@vsync_GTNL_1:
	cmp     20
	beq     @vsync_GTNL_1
	inc     L0C88
	jmp     L0F0E
L0C9A:	jsr     _saveZonedScore
	lda     #<(_dScore)
	ldx     #>(_dScore)
	jsr     pushax
	lda     #<(_dNextLifeScore)
	ldx     #>(_dNextLifeScore)
	jsr     pushax
	ldx     #$00
	lda     #$05
	jsr     _memcmp
	cmp     #$01
	txa
	sbc     #$00
	bvs     L0CB0
	eor     #$80
L0CB0:	bpl     L0F0F
	lda     _gameLives
	cmp     #$09
	bcs     L0CB1
	inc     _gameLives
L0CB1:	jsr     _incrementNextLifeScore
L0F0F:	lda     _gameLevelIndex
	cmp     #$18
	bne     L0F10
	lda     #$96
	sec
	sbc     L0C89
	jsr     pusha
	jsr     _delay
	ldx     #$00
	lda     #$01
	rts
L0F10:	inc     _gameLevelIndex
	lda     _gameLevelIndex
	sec
	sbc     _gameMaxLevelIndex
	bcc     L0F11
	beq     L0F11
	lda     _gameLevelIndex
	sta     _gameMaxLevelIndex
L0F11:	lda     #$96
	sec
	sbc     L0C89
	jsr     pusha
	jsr     _delay
	ldx     #$00
	txa
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ gameLoseLife (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_gameLoseLife: near

.segment	"BSS"

L0CC7:
	.res	1,$00
L0CC8:
	.res	1,$00
L0CC9:
	.res	1,$00
L0CCA:
	.res	1,$00
L0CCB:
	.res	1,$00

.segment	"CODE"

	lda     #>(_TRAIN_DATA_STATUSBARSCREEN+14)
	sta     ptr1+1
	lda     #<(_TRAIN_DATA_STATUSBARSCREEN+14)
	sta     ptr1
	lda     #$00
	ldy     #$19
L0F12:	sta     (ptr1),y
	dey
	bpl     L0F12
	ldy     #$00
	lda     (sp),y
	cmp     #$01
	bne     L0F17
	lda     #<(_TRAIN_DATA_STATUSBARSCREEN+19)
	ldx     #>(_TRAIN_DATA_STATUSBARSCREEN+19)
	jsr     pushax
	lda     #<(_T_TRAIN_POISONED)
	ldx     #>(_T_TRAIN_POISONED)
	jsr     pushax
	ldx     #$00
	lda     #$10
	jmp     L0F14
L0F17:	lda     $D20A
	and     #$03
	sta     L0CC7
	lda     L0CC7
	beq     L0CE2
	cmp     #$01
	beq     L0CEA
	cmp     #$02
	beq     L0CF2
	cmp     #$03
	beq     L0CFA
	jmp     L0F19
L0CE2:	lda     #<(_TRAIN_DATA_STATUSBARSCREEN+20)
	ldx     #>(_TRAIN_DATA_STATUSBARSCREEN+20)
	jsr     pushax
	lda     #<(_T_TRAIN_CRASHED0)
	ldx     #>(_T_TRAIN_CRASHED0)
	jsr     pushax
	ldx     #$00
	lda     #$0D
	jmp     L0F14
L0CEA:	lda     #<(_TRAIN_DATA_STATUSBARSCREEN+18)
	ldx     #>(_TRAIN_DATA_STATUSBARSCREEN+18)
	jsr     pushax
	lda     #<(_T_TRAIN_CRASHED1)
	ldx     #>(_T_TRAIN_CRASHED1)
	jsr     pushax
	ldx     #$00
	lda     #$12
	jmp     L0F14
L0CF2:	lda     #<(_TRAIN_DATA_STATUSBARSCREEN+16)
	ldx     #>(_TRAIN_DATA_STATUSBARSCREEN+16)
	jsr     pushax
	lda     #<(_T_TRAIN_CRASHED2)
	ldx     #>(_T_TRAIN_CRASHED2)
	jsr     pushax
	ldx     #$00
	lda     #$16
	jmp     L0F14
L0CFA:	lda     #<(_TRAIN_DATA_STATUSBARSCREEN+20)
	ldx     #>(_TRAIN_DATA_STATUSBARSCREEN+20)
	jsr     pushax
	lda     #<(_T_TRAIN_CRASHED3)
	ldx     #>(_T_TRAIN_CRASHED3)
	jsr     pushax
	ldx     #$00
	lda     #$0E
L0F14:	jsr     _memcpy
	ldy     #$00
L0F19:	lda     (sp),y
	bne     L0F1A
	lda     #$F4
	sta     L0CCA
	lda     #$FF
	sta     L0CCB
	lda     #$04
	jmp     L0F20
L0F1A:	lda     #$B4
	sta     L0CCA
	lda     #$BF
	sta     L0CCB
	lda     #$10
L0F20:	jsr     pusha
	jsr     _audioRequestSFX
	lda     L0CCA
	sta     L0CC8
L0F1B:	lda     L0CC8
	cmp     L0CCB
	bcs     L0F1C
	ldx     #$02
	lda     #$C0
	jsr     pushax
	lda     L0CC8
	jsr     pusha0
	lda     #$04
	jsr     _memset
	lda     #$03
	jsr     pusha
	jsr     _delay
	inc     L0CC8
	jmp     L0F1B
L0F1C:	lda     L0CCB
	sta     L0CC8
L0F1D:	lda     L0CC8
	sec
	sbc     L0CCA
	sta     tmp1
	lda     tmp1
	beq     L0D22
	bcc     L0D22
	ldx     #$02
	lda     #$C0
	jsr     pushax
	lda     L0CC8
	jsr     pusha0
	lda     #$04
	jsr     _memset
	lda     #$02
	jsr     pusha
	jsr     _delay
	dec     L0CC8
	jmp     L0F1D
L0D22:	jsr     _hideLoco
	jsr     _pmgSetForLoco
	ldy     #$00
	lda     (sp),y
	bne     L0D31
	lda     _gameScorePtr
	ldx     _gameScorePtr+1
	jsr     pushax
	lda     #<(_d300)
	ldx     #>(_d300)
	jsr     pushax
	ldx     #$00
	lda     #$05
	jsr     _memcmp
	cmp     #$01
	txa
	sbc     #$00
	bvs     L0D3A
	eor     #$80
L0D3A:	bpl     L0D34
	lda     #$00
	sta     L0CC9
L0F1E:	lda     L0CC9
	cmp     #$1E
	bcs     L0D4C
	lda     #$01
	jsr     pusha
	jsr     _verticalSync
	jsr     _decrementScore
	inc     L0CC9
	jmp     L0F1E
L0D34:	lda     _gameScorePtr
	ldx     _gameScorePtr+1
	jsr     pushax
	lda     #$10
	jsr     pusha0
	lda     #$05
	jsr     _memset
	jmp     L0D4C
L0D31:	lda     _gameScorePtr
	ldx     _gameScorePtr+1
	jsr     pushax
	lda     #<(_dLevelInitialScore)
	ldx     #>(_dLevelInitialScore)
	jsr     pushax
	ldx     #$00
	lda     #$05
	jsr     _memcpy
L0D4C:	lda     #$32
	jsr     pusha
	jsr     _delay
	jsr     _saveZonedScore
	ldx     #$00
	lda     (sp,x)
	bne     L0F16
	lda     _gameLives
	beq     L0F1F
	dec     _gameLives
	jmp     L0F16
L0F1F:	lda     #$01
	jmp     incsp1
L0F16:	txa
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ screenGameOver (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_screenGameOver: near

.segment	"CODE"

	jsr     _setIntermissionScreen
	jsr     _hideLoco
	jsr     _clearScreen
	jsr     _clearStatusBar
	lda     #<(_TRAIN_DATA_GAMESCREEN+20)
	ldx     #>(_TRAIN_DATA_GAMESCREEN+20)
	jsr     pushax
	lda     #$59
	jsr     pusha0
	lda     #$28
	jsr     _memset
	lda     #<(_TRAIN_DATA_GAMESCREEN+200)
	ldx     #>(_TRAIN_DATA_GAMESCREEN+200)
	jsr     pushax
	lda     #$59
	jsr     pusha0
	lda     #$28
	jsr     _memset
	lda     #<(_TRAIN_DATA_GAMESCREEN+105)
	ldx     #>(_TRAIN_DATA_GAMESCREEN+105)
	jsr     pushax
	lda     #<(_T_GAME_OVER)
	ldx     #>(_T_GAME_OVER)
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     _memcpy
	lda     #$33
	jsr     pusha
	jsr     _audioRequestSongLine
	jsr     _enableDisplay
	lda     #$64
	jsr     pusha
	jsr     _delay
	jsr     _swapAllControls
	lda     #<(_TRAIN_DATA_STATUSBARSCREEN+9)
	ldx     #>(_TRAIN_DATA_STATUSBARSCREEN+9)
	jsr     pushax
	lda     #<(_T_PRESS_FIRE)
	ldx     #>(_T_PRESS_FIRE)
	jsr     pushax
	ldx     #$00
	lda     #$16
	jsr     _memcpy
L0F21:	lda     $0284
	cmp     #$01
	beq     L0F21
	lda     #$49
	jsr     pusha
	jmp     _audioRequestSongLine

.endproc

; ---------------------------------------------------------------
; void __near__ screenGratulation (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_screenGratulation: near

.segment	"BSS"

L0BE9:
	.res	2,$00

.segment	"CODE"

	jsr     _setIntermissionScreen
	jsr     _pmgSetForLoco
	jsr     _fadeInAndOut
	jsr     _clearScreen
	jsr     _clearStatusBar
	lda     #<(_TRAIN_DATA_GAMESCREEN+20)
	ldx     #>(_TRAIN_DATA_GAMESCREEN+20)
	jsr     pushax
	lda     #$59
	jsr     pusha0
	lda     #$28
	jsr     _memset
	lda     #<(_TRAIN_DATA_GAMESCREEN+200)
	ldx     #>(_TRAIN_DATA_GAMESCREEN+200)
	jsr     pushax
	lda     #$59
	jsr     pusha0
	lda     #$28
	jsr     _memset
	lda     #<(_TRAIN_DATA_GAMESCREEN+160)
	ldx     #>(_TRAIN_DATA_GAMESCREEN+160)
	jsr     pushax
	lda     #$5E
	jsr     pusha0
	lda     #$28
	jsr     _memset
	lda     #<(_TRAIN_DATA_GAMESCREEN)
	ldx     #>(_TRAIN_DATA_GAMESCREEN)
	sta     L0BE9
	stx     L0BE9+1
	jsr     incax1
	jsr     pushax
	lda     #<(_T_CONGRAT_1)
	ldx     #>(_T_CONGRAT_1)
	jsr     pushax
	ldx     #$00
	lda     #$11
	jsr     _memcpy
	lda     #<(_TRAIN_DATA_GAMESCREEN+60)
	ldx     #>(_TRAIN_DATA_GAMESCREEN+60)
	sta     L0BE9
	stx     L0BE9+1
	jsr     incax3
	jsr     pushax
	lda     #<(_T_CONGRAT_2)
	ldx     #>(_T_CONGRAT_2)
	jsr     pushax
	ldx     #$00
	lda     #$0D
	jsr     _memcpy
	lda     #$14
	clc
	adc     L0BE9
	sta     L0BE9
	bcc     L0C10
	inc     L0BE9+1
L0C10:	lda     L0BE9
	ldx     L0BE9+1
	jsr     incax4
	jsr     pushax
	lda     #<(_T_CONGRAT_3)
	ldx     #>(_T_CONGRAT_3)
	jsr     pushax
	ldx     #$00
	lda     #$0B
	jsr     _memcpy
	lda     #$28
	clc
	adc     L0BE9
	sta     L0BE9
	bcc     L0C19
	inc     L0BE9+1
L0C19:	lda     L0BE9
	ldx     L0BE9+1
	jsr     incax2
	jsr     pushax
	lda     #<(_T_CONGRAT_4)
	ldx     #>(_T_CONGRAT_4)
	jsr     pushax
	ldx     #$00
	lda     #$10
	jsr     _memcpy
	lda     #>(_TRAIN_FIGURE_RIGHT)
	sta     _trainData+1
	lda     #<(_TRAIN_FIGURE_RIGHT)
	sta     _trainData
	lda     #$00
	jsr     pusha
	lda     #$06
	jsr     pusha
	lda     #$00
	jsr     pusha
	lda     #$0E
	jsr     pusha
	jsr     _setLocoPos
	lda     #$01
	sta     _menuCycleTrainFlag
	lda     #$3A
	jsr     pusha
	jsr     _audioRequestSongLine
	jsr     _enableDisplay
	lda     #$64
	jsr     pusha
	jsr     _delay
	jsr     _swapAllControls
	lda     #<(_TRAIN_DATA_STATUSBARSCREEN+9)
	ldx     #>(_TRAIN_DATA_STATUSBARSCREEN+9)
	jsr     pushax
	lda     #<(_T_PRESS_FIRE)
	ldx     #>(_T_PRESS_FIRE)
	jsr     pushax
	ldx     #$00
	lda     #$16
	jsr     _memcpy
	jsr     _screenRainbow
	lda     #$00
	sta     _menuCycleTrainFlag
	lda     #$49
	jsr     pusha
	jmp     _audioRequestSongLine

.endproc

; ---------------------------------------------------------------
; void __near__ screenNewHighScore (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_screenNewHighScore: near

.segment	"CODE"

	jsr     _disableDisplay
	jsr     _clearStatusBar
	jsr     _clearScreen
	jsr     _fadeInAndOut
	jsr     _pmgSetForLoco
	lda     #<(_TRAIN_DATA_GAMESCREEN+20)
	ldx     #>(_TRAIN_DATA_GAMESCREEN+20)
	jsr     pushax
	lda     #$59
	jsr     pusha0
	lda     #$28
	jsr     _memset
	lda     #<(_TRAIN_DATA_GAMESCREEN+200)
	ldx     #>(_TRAIN_DATA_GAMESCREEN+200)
	jsr     pushax
	lda     #$59
	jsr     pusha0
	lda     #$28
	jsr     _memset
	lda     #<(_TRAIN_DATA_GAMESCREEN+160)
	ldx     #>(_TRAIN_DATA_GAMESCREEN+160)
	jsr     pushax
	lda     #$5E
	jsr     pusha0
	lda     #$28
	jsr     _memset
	lda     #<(_TRAIN_DATA_GAMESCREEN+5)
	ldx     #>(_TRAIN_DATA_GAMESCREEN+5)
	jsr     pushax
	lda     #<(_T_WELL_DONE)
	ldx     #>(_T_WELL_DONE)
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     _memcpy
	lda     #<(_TRAIN_DATA_GAMESCREEN+83)
	ldx     #>(_TRAIN_DATA_GAMESCREEN+83)
	jsr     pushax
	lda     #<(_T_NEW_HISCORE)
	ldx     #>(_T_NEW_HISCORE)
	jsr     pushax
	ldx     #$00
	lda     #$0E
	jsr     _memcpy
	lda     #<(_TRAIN_DATA_GAMESCREEN+107)
	ldx     #>(_TRAIN_DATA_GAMESCREEN+107)
	jsr     pushax
	lda     #<(_dHighScore)
	ldx     #>(_dHighScore)
	jsr     pushax
	ldx     #$00
	lda     #$05
	jsr     _memcpy
	lda     #$10
	sta     _TRAIN_DATA_GAMESCREEN+112
	lda     #>(_TRAIN_FIGURE_RIGHT)
	sta     _trainData+1
	lda     #<(_TRAIN_FIGURE_RIGHT)
	sta     _trainData
	lda     #$00
	jsr     pusha
	lda     #$06
	jsr     pusha
	lda     #$00
	jsr     pusha
	lda     #$0E
	jsr     pusha
	jsr     _setLocoPos
	lda     #$01
	sta     _menuCycleTrainFlag
	lda     #$2B
	jsr     pusha
	jsr     _audioRequestSongLine
	jsr     _enableDisplay
	lda     #$64
	jsr     pusha
	jsr     _delay
	jsr     _swapAllControls
	lda     #<(_TRAIN_DATA_STATUSBARSCREEN+9)
	ldx     #>(_TRAIN_DATA_STATUSBARSCREEN+9)
	jsr     pushax
	lda     #<(_T_PRESS_FIRE)
	ldx     #>(_T_PRESS_FIRE)
	jsr     pushax
	ldx     #$00
	lda     #$16
	jsr     _memcpy
L0F22:	lda     $0284
	cmp     #$01
	beq     L0F22
	lda     #$00
	sta     _menuCycleTrainFlag
	lda     #$49
	jsr     pusha
	jmp     _audioRequestSongLine

.endproc

; ---------------------------------------------------------------
; void __near__ swapAllControls (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_swapAllControls: near

.segment	"CODE"

	lda     #$FF
	sta     $02FC
	lda     #$01
	jsr     pusha
	jsr     _delay
L0DAF:	lda     $0284
	beq     L0DAF
	lda     $D01F
	cmp     #$07
	bne     L0DAF
	lda     $0278
	cmp     #$0F
	bne     L0DAF
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"BSS"

L02EC:
	.res	2,$00
L02ED:
	.res	1,$00

.segment	"CODE"

	jsr     _disableDisplay
	lda     #$02
	jsr     pusha
	jsr     _verticalSync
	lda     #$01
	sta     $0244
	lda     #$00
	sta     _gameInitType
	jsr     pusha
	jsr     _setGameSpeed
	lda     #$00
	sta     _menuGameSpeed
	sta     _menuGameAudio
	lda     _gameInitType
	jsr     pusha
	jsr     _toggleGameInit
	jsr     _pmgInit
	jsr     _pmgSetForLoco
	jsr     _decimalDisplaysInit
	lda     #$00
	sta     _gameMaxLevelIndex
	lda     #<(_dHighScore)
	ldx     #>(_dHighScore)
	jsr     pushax
	lda     #$10
	jsr     pusha0
	lda     #$05
	jsr     _memset
	lda     #<(_dLastScore)
	ldx     #>(_dLastScore)
	jsr     pushax
	lda     #$10
	jsr     pusha0
	lda     #$05
	jsr     _memset
	lda     #$00
	jsr     pusha
	jsr     _audioSetInGameFlag
	jsr     _audioSetForSilence
	jsr     _rmtSetUniversalVBI
L0317:	jsr     _handleMenu
	jsr     _disableDisplay
	lda     #$01
	jsr     pusha
	jsr     _verticalSync
	lda     #$00
	sta     _gameLevelIndex
	lda     #$FE
	sta     _lastLevelExpanded
	lda     _gameInitLives
	sta     _gameLives
	lda     #<(_dNextLifeScore)
	ldx     #>(_dNextLifeScore)
	jsr     pushax
	lda     #<(_dGameInitNextLifeScore)
	ldx     #>(_dGameInitNextLifeScore)
	jsr     pushax
	ldx     #$00
	lda     #$05
	jsr     _memcpy
	lda     #<(_dScore)
	ldx     #>(_dScore)
	jsr     pushax
	lda     #<(_dGameInitScore)
	ldx     #>(_dGameInitScore)
	jsr     pushax
	ldx     #$00
	lda     #$05
	jsr     _memcpy
	lda     _menuGameSpeed
	jsr     pusha
	jsr     _setGameSpeed
	lda     _gameMaxLevelIndex
	beq     L0F2C
	jsr     _disableDisplay
	jsr     _fadeInAndOut
	jsr     _screenSceneSelection
	sta     _gameLevelIndex
L0F2C:	lda     _menuGameAudio
	cmp     #$01
	bne     L0336
	lda     #$00
	jmp     L0F42
L0336:	lda     #$49
L0F42:	jsr     pusha
	jsr     _audioRequestSongLine
	lda     #$01
	jsr     pusha
	jsr     _audioSetInGameFlag
L0342:	lda     #<(_TRAIN_DATA_DL_GAME)
	ldx     #>(_TRAIN_DATA_DL_GAME)
	jsr     pushax
	lda     #$0C
	jsr     pusha
	lda     #$30
	jsr     pusha
	lda     #<(_dliHandler)
	ldx     #>(_dliHandler)
	jsr     pushax
	lda     _TRAIN_DATA_CHARSET1_PAGE
	jsr     pusha
	lda     #$24
	jsr     pusha
	lda     #$0C
	jsr     pusha
	lda     #$32
	jsr     pusha
	lda     #$0E
	jsr     pusha
	lda     #$00
	jsr     pusha
	jsr     _setScreen
	jsr     _pmgSetForLoco
	jsr     _hideLoco
	jsr     _clearStatusBar
	jsr     _clearPlayField
	lda     #<(_dLevelInitialScore)
	ldx     #>(_dLevelInitialScore)
	jsr     pushax
	lda     #<(_dScore)
	ldx     #>(_dScore)
	jsr     pushax
	ldx     #$00
	lda     #$05
	jsr     _memcpy
	lda     _gameLevelIndex
	jsr     pusha
	jsr     _expandAndPaintLevel
	jsr     _paintGameStatusBar
	lda     _locoX
	jsr     pusha
	lda     _locoY
	jsr     pusha
	lda     #$00
	jsr     pusha
	jsr     pusha
	jsr     _setLocoPos
	lda     _levelInitialLocoFigure+1
	sta     _trainData+1
	lda     _levelInitialLocoFigure
	sta     _trainData
	jsr     _repaintLoco
	jsr     _levelFadeIn
	jsr     _swapAllControls
	lda     #$00
	sta     _levelTrainLength
	lda     #>(_trainCarArray)
	sta     ptr1+1
	lda     #<(_trainCarArray)
	sta     ptr1
	lda     #$00
	tay
L0F25:	sta     (ptr1),y
	iny
	cpy     #$B4
	bne     L0F25
	lda     #>(_trainCarArray)
	sta     ptr1+1
	lda     #<(_trainCarArray)
	sta     ptr1
	lda     #$00
	tay
L0F26:	sta     (ptr1),y
	iny
	cpy     #$B4
	bne     L0F26
	lda     #$0F
	sta     _locoOldJoystickDirection
	lda     #$FF
	sta     _lastKey
L0376:	jsr     _getFilteredJS
	lda     $02FC
	sta     _lastKey
	lda     _filteredJS
	cmp     #$0F
	bne     L0F2F
	lda     _lastKey
	cmp     #$1C
	bne     L0376
L0F2F:	lda     _lastKey
	cmp     #$1C
	bne     L0F30
	jsr     _audioStopInGameAudio
	jmp     L0317
L0F30:	lda     #$00
	sta     $0014
	sta     $02FC
	sta     $004D
	lda     _normalMoveDelay
	sta     _realMoveDelay
	lda     _normalMoveDelay
	lsr     a
	sta     _fastMoveDelay
L0F31:	lda     $0284
	bne     L039B
	lda     _fastMoveDelay
	sta     _realMoveDelay
L039B:	jsr     _getFilteredJS
	lda     _filteredJS
	cmp     #$0F
	beq     L0F32
	sta     _locoJoystickDirection
L0F32:	lda     $02FC
	cmp     #$1C
	bne     L0F33
	jsr     _audioStopInGameAudio
	jmp     L0317
L0F33:	lda     $0014
	cmp     _realMoveDelay
	bcc     L0F31
	lda     #$00
	sta     $0014
	lda     _normalMoveDelay
	sta     _realMoveDelay
	lda     _locoJoystickDirection
	cmp     #$0B
	bne     L0F34
	lda     _locoPtr
	ldx     _locoPtr+1
	jsr     decax2
	sta     _locoProbePtr
	stx     _locoProbePtr+1
	lda     #$00
	sta     _locoDirectionCode
	lda     #>(_TRAIN_FIGURE_LEFT)
	sta     _trainData+1
	lda     #<(_TRAIN_FIGURE_LEFT)
	jmp     L0F2A
L0F34:	lda     _locoJoystickDirection
	cmp     #$07
	bne     L0F35
	lda     _locoPtr
	ldx     _locoPtr+1
	jsr     incax2
	sta     _locoProbePtr
	stx     _locoProbePtr+1
	lda     #$01
	sta     _locoDirectionCode
	lda     #>(_TRAIN_FIGURE_RIGHT)
	sta     _trainData+1
	lda     #<(_TRAIN_FIGURE_RIGHT)
	jmp     L0F2A
L0F35:	lda     _locoJoystickDirection
	cmp     #$0E
	bne     L0F36
	lda     _locoPtr
	ldx     _locoPtr+1
	ldy     #$50
	jsr     decaxy
	sta     _locoProbePtr
	stx     _locoProbePtr+1
	lda     #$02
	sta     _locoDirectionCode
	lda     #>(_TRAIN_FIGURE_UP)
	sta     _trainData+1
	lda     #<(_TRAIN_FIGURE_UP)
	jmp     L0F2A
L0F36:	lda     _locoJoystickDirection
	cmp     #$0D
	bne     L0F37
	lda     _locoPtr
	ldx     _locoPtr+1
	ldy     #$50
	jsr     incaxy
	sta     _locoProbePtr
	stx     _locoProbePtr+1
	lda     #$03
	sta     _locoDirectionCode
	lda     #>(_TRAIN_FIGURE_DOWN)
	sta     _trainData+1
	lda     #<(_TRAIN_FIGURE_DOWN)
L0F2A:	sta     _trainData
L0F37:	lda     _locoJoystickDirection
	cmp     _locoOldJoystickDirection
	beq     L03E6
	jsr     _repaintLoco
	lda     _locoJoystickDirection
	sta     _locoOldJoystickDirection
L03E6:	lda     _locoProbePtr+1
	sta     ptr1+1
	lda     _locoProbePtr
	sta     ptr1
	ldy     #$00
	lda     (ptr1),y
	and     #$7C
	sta     _probedElement
	cmp     #$1C
	jne     L0F38
	lda     _locoProbePtr
	ldx     _locoProbePtr+1
	sta     L02EC
	stx     L02EC+1
	sta     ptr1
	stx     ptr1+1
	tya
	sta     (ptr1),y
	inc     L02EC
	bne     L03F8
	inc     L02EC+1
L03F8:	lda     L02EC+1
	sta     ptr1+1
	lda     L02EC
	sta     ptr1
	tya
	sta     (ptr1),y
	lda     #$27
	clc
	adc     L02EC
	sta     L02EC
	bcc     L03FE
	inc     L02EC+1
L03FE:	lda     L02EC+1
	sta     ptr1+1
	lda     L02EC
	sta     ptr1
	tya
	sta     (ptr1),y
	inc     L02EC
	bne     L0403
	inc     L02EC+1
L0403:	lda     L02EC+1
	sta     ptr1+1
	lda     L02EC
	sta     ptr1
	tya
	sta     (ptr1),y
	lda     _locoJoystickDirection
	jsr     pusha
	jsr     _locoMove
	lda     _levelTrainLength
	beq     L0409
	lda     _locoDirectionCode
	jsr     pusha
	jsr     _updateTrainArray
	lda     #$01
	jsr     pusha
	jsr     _drawTrainCars
L0409:	jsr     _gameToNextLevel
	cmp     #$00
	bne     L040F
	jsr     _levelFadeOut
	jmp     L0342
L040F:	jsr     _audioStopInGameAudio
	jsr     _levelFadeOut
	jsr     _screenGratulation
	jsr     _updateMenuScores
	cmp     #$01
	jne     L0317
	jsr     _screenNewHighScore
	jmp     L0317
L0F38:	lda     _probedElement
	cmp     #$11
	jcc     L0F3D
	cmp     #$20
	bne     L0F39
	lda     _levelFlags
	and     #$80
	bne     L0F3A
L0F39:	tya
	jmp     L0F2B
L0F3A:	lda     _locoProbePtr
	ldx     _locoProbePtr+1
	sta     L02EC
	stx     L02EC+1
	sta     ptr1
	stx     ptr1+1
	tya
	sta     (ptr1),y
	inc     L02EC
	bne     L042D
	inc     L02EC+1
L042D:	lda     L02EC+1
	sta     ptr1+1
	lda     L02EC
	sta     ptr1
	tya
	sta     (ptr1),y
	lda     #$27
	clc
	adc     L02EC
	sta     L02EC
	bcc     L0433
	inc     L02EC+1
L0433:	lda     L02EC+1
	sta     ptr1+1
	lda     L02EC
	sta     ptr1
	tya
	sta     (ptr1),y
	inc     L02EC
	bne     L0438
	inc     L02EC+1
L0438:	lda     L02EC+1
	sta     ptr1+1
	lda     L02EC
	sta     ptr1
	tya
	sta     (ptr1),y
	lda     _locoJoystickDirection
	jsr     pusha
	jsr     _locoMove
	lda     _levelTrainLength
	beq     L0F3B
	lda     _locoDirectionCode
	jsr     pusha
	jsr     _updateTrainArray
	lda     #$01
	jsr     pusha
	jsr     _drawTrainCars
L0F3B:	lda     #$01
L0F2B:	sta     L02ED
	jsr     pusha
	jsr     _gameLoseLife
	cmp     #$00
	bne     L044B
	jsr     _levelFadeOut
	jmp     L0342
L044B:	jsr     _levelFadeOut
	jsr     _audioStopInGameAudio
	jsr     _screenGameOver
	jsr     _updateMenuScores
	cmp     #$01
	jne     L0317
	jsr     _screenNewHighScore
	jmp     L0317
L0F3D:	lda     _probedElement
	cmp     #$04
	jcc     L045A
	cmp     #$11
	jcs     L045A
	lda     #$02
	jsr     pusha
	jsr     _audioRequestSFX
	lda     _locoProbePtr
	ldx     _locoProbePtr+1
	sta     L02EC
	stx     L02EC+1
	sta     ptr1
	stx     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	inc     L02EC
	bne     L0469
	inc     L02EC+1
L0469:	lda     L02EC+1
	sta     ptr1+1
	lda     L02EC
	sta     ptr1
	tya
	sta     (ptr1),y
	lda     #$27
	clc
	adc     L02EC
	sta     L02EC
	bcc     L046F
	inc     L02EC+1
L046F:	lda     L02EC+1
	sta     ptr1+1
	lda     L02EC
	sta     ptr1
	tya
	sta     (ptr1),y
	inc     L02EC
	bne     L0474
	inc     L02EC+1
L0474:	lda     L02EC+1
	sta     ptr1+1
	lda     L02EC
	sta     ptr1
	tya
	sta     (ptr1),y
	lda     _locoJoystickDirection
	jsr     pusha
	jsr     _locoMove
	lda     _levelTrainLength
	bne     L047A
	lda     _locoDirectionCode
	sta     _trainDirectionArray
L047A:	lda     #<(_trainCarArray)
	ldx     #>(_trainCarArray)
	clc
	adc     _levelTrainLength
	bcc     L0481
	inx
L0481:	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _probedElement
	jsr     decax4
	jsr     shlax2
	ldy     #$40
	jsr     incaxy
	ldy     #$00
	sta     (ptr1),y
	inc     _levelTrainLength
	lda     _locoDirectionCode
	jsr     pusha
	jsr     _updateTrainArray
	jsr     _incrementScore
	lda     _gameScorePtr
	ldx     _gameScorePtr+1
	jsr     pushax
	lda     #<(_dNextLifeScore)
	ldx     #>(_dNextLifeScore)
	jsr     pushax
	ldx     #$00
	lda     #$05
	jsr     _memcmp
	cmp     #$01
	txa
	sbc     #$00
	bvs     L0491
	eor     #$80
L0491:	asl     a
	lda     #$00
	bcc     L0F41
	lda     _gameLives
	cmp     #$09
	bcs     L0492
	inc     _gameLives
	lda     _gameLivesPtr+1
	sta     ptr1+1
	lda     _gameLivesPtr
	sta     ptr1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
L0492:	jsr     _incrementNextLifeScore
	lda     #$00
L0F41:	jsr     pusha
	jsr     _drawTrainCars
	lda     _locoProbePtr+1
	sta     _locoPtr+1
	lda     _locoProbePtr
	sta     _locoPtr
	dec     _levelTreasure
	jne     L0F31
	lda     _doorPtr+1
	sta     ptr1+1
	lda     _doorPtr
	sta     ptr1
	ldx     #$00
	lda     _inverseMasks+28
	ldy     #$1C
	jsr     incaxy
	ldy     #$00
	sta     (ptr1),y
	lda     _doorPtr
	ldx     _doorPtr+1
	jsr     incax1
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _inverseMasks+29
	ldy     #$1D
	jsr     incaxy
	ldy     #$00
	sta     (ptr1),y
	lda     _doorPtr
	ldx     _doorPtr+1
	ldy     #$28
	jsr     incaxy
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _inverseMasks+30
	ldy     #$1E
	jsr     incaxy
	ldy     #$00
	sta     (ptr1),y
	lda     _doorPtr
	ldx     _doorPtr+1
	ldy     #$29
	jsr     incaxy
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _inverseMasks+31
	ldy     #$1F
	jsr     incaxy
	ldy     #$00
	sta     (ptr1),y
	jmp     L0F31
L045A:	lda     #$01
	jsr     pusha
	jsr     _audioRequestSFX
	lda     _locoJoystickDirection
	jsr     pusha
	jsr     _locoMove
	lda     _locoDirectionCode
	jsr     pusha
	jsr     _updateTrainArray
	lda     #$01
	jsr     pusha
	jsr     _drawTrainCars
	lda     _locoProbePtr+1
	sta     _locoPtr+1
	lda     _locoProbePtr
	sta     _locoPtr
	jmp     L0F31

.endproc

; ---------------------------------------------------------------
; void __near__ saveZonedScore (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_saveZonedScore: near

.segment	"CODE"

	lda     #<(_dScore)
	ldx     #>(_dScore)
	jsr     pushax
	lda     _gameScorePtr
	ldx     _gameScorePtr+1
	jsr     pushax
	ldx     #$00
	lda     #$05
	jmp     _memcpy

.endproc

; ---------------------------------------------------------------
; void __near__ setIntermissionScreen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setIntermissionScreen: near

.segment	"CODE"

	lda     #<(_TRAIN_DATA_DL_INTERMISSION)
	ldx     #>(_TRAIN_DATA_DL_INTERMISSION)
	jsr     pushax
	lda     #$0C
	jsr     pusha
	lda     #$00
	jsr     pusha
	lda     #<(_dliInterMission)
	ldx     #>(_dliInterMission)
	jsr     pushax
	lda     _TRAIN_DATA_CHARSET2_PAGE
	jsr     pusha
	lda     #$C8
	jsr     pusha
	lda     #$0C
	jsr     pusha
	lda     #$00
	jsr     pusha
	jsr     pusha
	jsr     pusha
	jmp     _setScreen

.endproc

; ---------------------------------------------------------------
; void __near__ setSceneSelectionScreen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setSceneSelectionScreen: near

.segment	"CODE"

	lda     #<(_TRAIN_DATA_DL_SCENESELECTION)
	ldx     #>(_TRAIN_DATA_DL_SCENESELECTION)
	jsr     pushax
	lda     #$0C
	jsr     pusha
	lda     #$00
	jsr     pusha
	lda     #<(_dliInterMission)
	ldx     #>(_dliInterMission)
	jsr     pushax
	lda     _TRAIN_DATA_CHARSET2_PAGE
	jsr     pusha
	lda     #$C8
	jsr     pusha
	lda     #$0C
	jsr     pusha
	lda     #$00
	jsr     pusha
	lda     #$0E
	jsr     pusha
	lda     #$00
	jsr     pusha
	jmp     _setScreen

.endproc

; ---------------------------------------------------------------
; void __near__ sceneSelectionMoveHighlight (__near__ __near__ unsigned char * *, signed char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_sceneSelectionMoveHighlight: near

.segment	"BSS"

L0A6F:
	.res	2,$00

.segment	"CODE"

	ldy     #$02
	jsr     ldaxysp
	jsr     ldaxi
	sta     L0A6F
	stx     L0A6F+1
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	and     #$7F
	sta     (ptr1),y
	lda     L0A6F
	ldx     L0A6F+1
	jsr     incax1
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	and     #$7F
	sta     (ptr1),y
	ldx     #$00
	lda     (sp),y
	cmp     #$80
	bcc     L0F43
	dex
	clc
L0F43:	adc     L0A6F
	sta     L0A6F
	txa
	adc     L0A6F+1
	sta     L0A6F+1
	sta     ptr1+1
	lda     L0A6F
	sta     ptr1
	lda     (ptr1),y
	ora     #$80
	sta     (ptr1),y
	lda     L0A6F
	ldx     L0A6F+1
	jsr     incax1
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	ora     #$80
	sta     (ptr1),y
	ldy     #$02
	jsr     ldaxysp
	jsr     pushax
	jsr     ldaxi
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	ldy     #$02
	lda     (sp),y
	bpl     L0A83
	dex
L0A83:	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	ldy     #$00
	jsr     staxspidx
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ screenRainbow (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_screenRainbow: near

.segment	"BSS"

L0BC5:
	.res	1,$00
L0BC6:
	.res	1,$00
L0BC7:
	.res	1,$00

.segment	"CODE"

	lda     #$00
	sta     L0BC7
	jmp     L0F4A
L0F47:	lda     $0014
	sta     L0BC5
	jmp     L0F49
L0F48:	lda     $D40B
	sta     L0BC6
	lda     #$00
	sta     $D40A
	lda     L0BC6
	clc
	adc     L0BC7
	and     #$F2
	sta     $D01A
L0F49:	lda     $0014
	cmp     L0BC5
	beq     L0F48
	inc     L0BC7
L0F4A:	lda     $0284
	cmp     #$01
	beq     L0F47
	rts

.endproc

